(*
# GameTabs
Methods to interact with the gametab buttons.

```{figure} ../../images/gametabs_compact.png
```
```{figure} ../../images/gametabs_flat.png
```

By default it will attempt to use "F-Keys" to open gametabs.
You can turn this off by setting `TRSGameTabs.KeybindsEnabled` to `False`.

The way keybindings work in WaspLib is that it will try a random "F-Key" everytime
you want to open a gametab. Because it uses a random "F-Key", it will probably
not open the gametab you want but whatever opens, gets cached and mapped to the
random "F-Key" used.

Next time you want to open a gametab that has already been mapped, it will use
the correct "F-Key".
*)
{$DEFINE WL_GAMETABS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

{.$DEFINE WL_KEYBINDS_DEBUG}

type
(*
## ERSGameTab
```pascal
ERSGameTab = enum(NONE, COMBAT, STATS, ACHIEVEMENTS, INVENTORY, EQUIPMENT, PRAYER, MAGIC, CLAN, FRIENDS, ACCOUNT, LOGOUT, OPTIONS, EMOTES, MUSIC);
```
*)
  ERSGameTab = enum(
    COMBAT, STATS, ACHIEVEMENTS, INVENTORY, EQUIPMENT, PRAYER, MAGIC,
    CLAN, FRIENDS, ACCOUNT, LOGOUT, OPTIONS, EMOTES, MUSIC, NONE
  );

(*
## TRSGameTabs
Main record responsible for handling the gametabs.
*)
  TRSGameTabs = record
    Bounds: TBox;
    Tabs: TBoxArray;
    Keybinds: array [ERSGameTab] of EKeyCode;
    KeybindsEnabled: Boolean;
    AvailableKeys: EKeycodeArray;
    const ActiveColor: TColorTolerance = [$14194A, 1.235, EColorSpace.HSL, [1.631, 1.084, 0.286]];
  end;

(*
## GameTabs.SetupInterface
```pascal
procedure TRSGameTabs.SetupInterface();
```
Internal method responsible for setting up coordinates for the {ref}`TRSGameTabs`.

This is automatically called for you on the {ref}`GameTabs variable`.
*)
procedure TRSGameTabs.SetupInterface();
var
  bounds: TBox;
  tab: ERSGameTab;
begin
  bounds := RSClient.Bounds;
  Self.Bounds.Y2 := bounds.Y2;

  case RSClient.Mode of
    ERSMode.FIXED:
    begin
      Self.Bounds.X1 := bounds.X2 - 242;
      Self.Bounds.X2 := bounds.X2 - 2;
      Self.Bounds.Y1 := bounds.Y2 - 334;
    end;

    ERSMode.RESIZABLE_CLASSIC:
    begin
      Self.Bounds.X1 := bounds.X2 - 240;
      Self.Bounds.X2 := bounds.X2;
      Self.Bounds.Y1 := bounds.Y2 - 334;
    end;

    ERSMode.RESIZABLE_MODERN:
    begin
      Self.Bounds.X2 := bounds.X2;

      //Needed because depending on the client width the tabs stack into row(s)
      if bounds.Width >= 948 then
      begin
        Self.Bounds.X1 := bounds.X2 - 428;
        Self.Bounds.Y1 := bounds.Y2 - 35;
      end
      else
      begin
        Self.Bounds.X1 := bounds.X2 - 230;
        Self.Bounds.Y1 := bounds.Y2 - 71;
      end;
    end;
  end;

  case RSClient.Mode of
    ERSMode.FIXED, ERSMode.RESIZABLE_CLASSIC:
      Self.Tabs := TBoxArray.Create(Self.Bounds.TopLeft.Offset(6,1), 7, 2, 30, 33, [3, 265]);

    ERSMode.RESIZABLE_MODERN:
      begin
        // One row
        if bounds.Width >= 948 then
        begin
          Self.Tabs := TBoxArray.Create(Self.Bounds.BottomLeft.Offset(0,-35), 14, 1, 30, 33, [3, 0]);
          for tab := ERSGameTab.MUSIC downto ERSGameTab.FRIENDS do
            Self.Tabs[tab] := Self.Tabs[tab-1];
        end
        else // Two rows
          Self.Tabs := TBoxArray.Create(Self.Bounds.BottomLeft.Offset(0,-70), 7, 2, 30, 33, [3, 3]);

        // Logout button is moved to top right corner
        Self.Tabs[7] := Self.Tabs[10];
        Self.Tabs[10].X1 := bounds.X2 - 19;
        Self.Tabs[10].Y1 := bounds.Y1 + 9;
        Self.Tabs[10].X2 := bounds.X2 - 10;
        Self.Tabs[10].Y2 := bounds.Y1 + 18;
      end;
  end;
end;

(*
## GameTabs.GetCurrent
```pascal
function TRSGameTabs.GetCurrent(): ERSGametab;
```
Get the currently active ERSGameTab.

Example:
```pascal
ShowOnTarget(GameTabs.Tabs[GameTabs.GetCurrent()]);
```
```{figure} ../../images/gametabs_selected.png
```
*)
function TRSGameTabs.GetCurrent(): ERSGametab;
var
  tab: ERSGameTab;
begin
  if (RSClient.Mode = ERSMode.RESIZABLE_MODERN) and (Target.CountColor(8639715, 0, Self.Tabs[ERSGameTab.LOGOUT-1]) > 0) then
    Exit(ERSGameTab.LOGOUT);

  for tab := ERSGameTab.COMBAT to ERSGameTab.MUSIC do
    if (Target.CountColor(Self.ActiveColor, Self.Tabs[tab]) > 50) then
      Exit(tab);
  Result := ERSGameTab.NONE;
end;


(*
## GameTabs.IsOpen
```pascal
function TRSGameTabs.IsOpen(tab: ERSGameTab): Boolean;
```
Returns true/false if the specified `tab` is currently open.

Example:
```pascal
WriteLn GameTabs.IsOpen(ERSGameTab.INVENTORY);
```
*)
function TRSGameTabs.IsOpen(tab: ERSGameTab): Boolean;
begin
  Result := Self.GetCurrent() = tab;
end;

(*
## GameTabs.WaitOpen
```pascal
function TRSGameTabs.WaitOpen(tab: ERSGameTab; time: Integer = 600; interval: Integer = -1): Boolean;
```
Returns true/false if the specified `tab` opens within the specified `time`.

Example:
```pascal
Mouse.Click(GameTabs.Get(ERSGameTab.INVENTORY), EMouseButton.LEFT);
WriteLn GameTabs.WaitOpen(ERSGameTab.INVENTORY);
```
*)
function TRSGameTabs.WaitOpen(tab: ERSGameTab; time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(tab), interval, time);
end;


(*
## GameTabs.FKeyOpen
```pascal
function TRSGameTabs.FKeyOpen(tab: ERSGameTab): Boolean;
```
Attempts to open the specified `tab` gametab with an FKey.
This works by randomly using FKeys that haven't been tried yet and slowly
caching which gametabs they open. At first most times this is used it won't
open the `tab` specified, but as more EKeyCode/ERSGameTab pairs get mapped
this starts getting them right.

Example:
```pascal
WriteLn GameTabs.FKeyOpen(ERSGameTab.INVENTORY);
```
*)
function TRSGameTabs.FKeyOpen(tab: ERSGameTab): Boolean;
var
  current, new: ERSGameTab;
  i: Integer;
  switched: Boolean;
begin
  {$IFDEF WaspLib_KEYBINDS_DEBUG}
  for current := ERSGameTab.COMBAT to ERSGameTab.MUSIC do
    WriteLn GetDebugLn('GameTabs', 'Keybinds -> ' + ToStr(current) + ' -> ' ToStr(Self.Keybinds[current]));
  {$ENDIF}

  if Self.Keybinds[tab] <> EKeyCode.UNKNOWN then
  begin
    Keyboard.PressKey(Self.Keybinds[tab]);
    Exit(Self.WaitOpen(tab, 2000));
  end;

  if Self.AvailableKeys = [] then Exit; //all keys are already setup and there's no match
  i := Random(0, High(Self.AvailableKeys));

  current := Self.GetCurrent();
  Keyboard.PressKey(Self.AvailableKeys[i]);

  switched := SleepUntil(current <> (new := Self.GetCurrent()), RandomMode(100, 50, 1500), 600);

  if switched then //if tab switched we are sure of this key-gametab pair
  begin
   Self.Keybinds[new] := Self.AvailableKeys[i];
   Delete(Self.AvailableKeys, i, 1);
  end
  else if Self.Keybinds[new] <> EKeyCode.UNKNOWN then
    Delete(Self.AvailableKeys, i, 1); //This key has no pair

  Result := new = Tab;
end;


(*
## GameTabs.Open
```pascal
function TRSGameTabs.Open(tab: ERSGameTab; fkeyProbability: Single = -1): Boolean;
```
Attempts to open the specified `tab` gametab.
If `TRSGameTabs.KeybindsEnabled` is true, we might attempt to open the tab
with {ref}`GameTabs.FKeyOpen`, subject to `fkeyProbability`.

Example:
```pascal
WriteLn GameTabs.Open(ERSGameTab.INVENTORY);
```
*)
function TRSGameTabs.Open(tab: ERSGameTab; fkeyProbability: Single = -1): Boolean;
begin
  if Self.IsOpen(tab) then Exit(True);

  if Self.KeybindsEnabled then
  begin
    if fkeyProbability = -1 then fkeyProbability := Biometrics.RandomDouble(0.8);

    if RandomBoolean(fkeyProbability) and Self.FKeyOpen(tab) then
      Exit(True);
  end;

  for 1 to 3 do
  begin
    // ForceMove to prevent a click failure when the cursor is already in the destination tab.
    Mouse.Click(Self.Tabs[tab], EMouseButton.LEFT, True);
    if Self.WaitOpen(tab, 2000) then Exit(True);
  end;
end;


procedure TRSGameTabs.Draw(img: TImage);
begin
  img.DrawBox(Self.Bounds);
  img.DrawBoxArray(Self.Tabs, False);
end;

var
(*
## GameTabs variable
Global {ref}`TRSGameTabs` variable.
*)
  GameTabs: TRSGameTabs;

(*
# GameTab
Gametabs interfaces core.
Whenever you want to use gametab coordinates that are not unique to a specific
tab you should use this.

Check {ref}`TRSInterface` to see what coordinates it has available.
*)
type
(*
## TRSGameTab
The TRSGameTab type that holds the core coordinates of a gametab.
*)
  TRSGameTab = type TRSInterface;

(*
## GameTab.SetupInterface
```pascal
procedure TRSGameTab.SetupInterface();
```
Internal method used to setup the {ref}`TRSGameTab` coordinates.

This is automatically called for you on the {ref}`GameTab variable`.
*)
procedure TRSGameTab.SetupInterface();
begin
  case RSClient.Mode of
    ERSMode.FIXED:
      with RSClient.Bounds do
      begin
        Self.Bounds.X1 := X2 - 214;
        Self.Bounds.X2 := X2 - 31;
        Self.Bounds.Y1 := Y2 - 298;
        Self.Bounds.Y2 := Y2 - 37;
      end;

    ERSMode.RESIZABLE_CLASSIC:
      with RSClient.Bounds do
      begin
        Self.Bounds.X1 := X2 - 212;
        Self.Bounds.X2 := X2 - 29;
        Self.Bounds.Y1 := Y2 - 298;
        Self.Bounds.Y2 := Y2 - 37;
      end;

    ERSMode.RESIZABLE_MODERN:
      with RSClient.Bounds do
      begin
        Self.Bounds.X1 := X2 - 193;
        Self.Bounds.X2 := X2 - 10;
        Self.Bounds.Y1 := GameTabs.Bounds.Y1 - 269;
        Self.Bounds.Y2 := GameTabs.Bounds.Y1 - 7;
      end;
  end;

  Self.Width  := Self.Bounds.Width;
  Self.Height := Self.Bounds.Height;
  Self.Center := Self.Bounds.Center;

  Self.TopLeft     := Self.Bounds.TopLeft;
  Self.TopRight    := Self.Bounds.TopRight;
  Self.BottomRight := Self.Bounds.BottomRight;
  Self.BottomLeft  := Self.Bounds.BottomLeft;

  Self.Quad := [Self.TopLeft, Self.TopRight, Self.BottomRight, Self.BottomLeft];
end;

var
(*
## GameTab variable
Global {ref}`TRSGameTab` variable.
*)
  GameTab: TRSGameTab;
