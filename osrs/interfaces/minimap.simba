(*
# Minimap
Methods to interact with the minimap.
```{figure} ../../images/minimap.png
The minimap interface.
```
*)

{$DEFINE WL_MINIMAP_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## ERSMinimapDots
```pascal
ERSMinimapDot  = enum(PLAYER, NPC, ITEM);
```
Enum representing the available minimap dots.
*)
  ERSMinimapDot  = enum(PLAYER, NPC, ITEM);
  ERSMinimapDots = set of ERSMinimapDot;
  TRSMinimapDotArray = array [ERSMinimapDot] of TPointArray;

(*
## ERSMinimapOrb
```pascal
ERSMinimapOrb  = enum(HITPOINTS, PRAYER, ENERGY, SPECIAL);
```
Enum representing the 4 available minimap orbs.
*)
  ERSMinimapOrb = enum(HITPOINTS, PRAYER, ENERGY, SPECIAL);

  TRSMinimapOrb = record
    Bounds : TBox;
    Circle : TCircle;
  end;

(*
## TRSMinimap
Main record used to interact with the {ref}`Minimap`.
*)
  TRSMinimap = record
    Orbs: array of TRSMinimapOrb;
    Bounds: TBox;
    Center: TPoint;
    Polygon: TPolygon;

    Compass: record
      PreviousRadians: Single;
      Circle: TCircle;
    end;

    Mask: TImage;

    const DotIMGs: array [ERSMinimapDot] of TImage = [
      ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAFzsuAkAAAAACAAAAAAAAAAgAAAAAAAAAMBkSgABAAAAAAAAAAAAAAAgAAAAAAAAAOD7MgcAAAAArlsBAAEAAACQU1wAAAAAAJAcugYAAAAAtnayBgAAAACIHLoGAAAAAFzsuAkAAAAAXOy4CQAAAAAg/DIHAAAAAHBgAQABiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAABnRSTlMAAAAAAABupgeRAAAAEUlEQVR4nGP4BwYMQPDmzRsARBgIuYq1W6UAAAAASUVORK5CYII='),
      ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAANf7QpQykwAAEDgu0v9/AADABkYIAAAAABgAAAAAAAAAAAAAAAAAAADAAV4AAQAAAND7MgcAAAAAf00BAAEAAAAX+0KUMpMAAIRosgYAAAAAAAAAAAAAAACEaLIGAAAAABD8MgcAAAAAkaIAAAEAAAAQ/DIHAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAABnRSTlMAAAAAAABupgeRAAAAFElEQVR4nGP484fp61cGEHj7lgEAL5AFvzCPessAAAAASUVORK5CYII='),
      ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAANf7QpQykwAAEDgu0v9/AABgG7AHAAAAABgAAAAAAAAAAAAAAAAAAADAAV4AAQAAAND7MgcAAAAAf00BAAEAAAAX+0KUMpMAAIRosgYAAAAAAAAAAAAAAACEaLIGAAAAABD8MgcAAAAAkaIAAAEAAAAQ/DIHAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAABnRSTlMAAAAAAABupgeRAAAAFUlEQVR4nGP4p6Dwh42NAQg+MjAAABzlAzh9c63TAAAAAElFTkSuQmCC')
    ];
    const FLAG: TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAIDjPwEAAAAA7joBAAEAAACQ4z8BAAAAALEMAQABAAAAgH8GCQAAAAAAiAYJAAAAAAgAAAAIAAAAgH8GCQAAAAABAAAAAgAAAAIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFUlEQVR4nGP4z8AQayzIcCyMBUgBABrmA2K2r4OdAAAAAElFTkSuQmCC');
  end;

(*
## Minimap.SetupInterface
```pascal
procedure TRSMinimap.SetupInterface();
```
Internal method used to setup the {ref}`TRSMinimap` coordinates.

This is automatically called for you on the {ref}`Minimap variable`.
*)
procedure TRSMinimap.SetupInterface();
var
  tpa: TPointArray;
  i: Integer;
begin
  case RSClient.Mode of
    ERSMode.RESIZABLE, ERSMode.MODERN_COMPACT, ERSMode.MODERN_WIDE:
    begin
      Self.Mask := new TImage(WLAssets.Images[3].Path);
      with RSClient.Bounds do
      begin
        Self.Bounds.X1 := X2 - 157;
        Self.Bounds.X2 := X2 - 6;
        Self.Bounds.Y1 := Y1 + 8;
        Self.Bounds.Y2 := Y1 + 159;
      end;
    end;

    ERSMode.FIXED:
    begin
      Self.Mask := new TImage(WLAssets.Images[2].Path);
      with RSClient.Bounds do
      begin
        Self.Bounds.X1 := X2 - 194;
        Self.Bounds.X2 := X2 - 50;
        Self.Bounds.Y1 := Y1 + 9;
        Self.Bounds.Y2 := Y1 + 159;
      end;
    end;
  end;

  SetLength(Self.Orbs, Ord(High(ERSMinimapOrb))+1);

  with Self.Bounds do
    case RSClient.Mode of
      ERSMode.RESIZABLE, ERSMode.MODERN_COMPACT, ERSMode.MODERN_WIDE:
      begin
        Self.Compass.Circle := [X1 - 2,  Y1 + 14,  17];
        Self.Orbs[ERSMinimapOrb.HITPOINTS].Circle := [X1 - 13, Y1 + 56,  12];
        Self.Orbs[ERSMinimapOrb.PRAYER].Circle    := [X1 - 14, Y1 + 89,  12];
        Self.Orbs[ERSMinimapOrb.ENERGY].Circle    := [X1 - 3,  Y1 + 122, 12];
        Self.Orbs[ERSMinimapOrb.SPECIAL].Circle   := [X1 + 18, Y1 + 147, 12];
        tpa := [[0, -76], [21, -73], [40, -64], [56, -51], [68, -33], [75, -1], [67, 34], [52, 43], [40, 62], [21, 72], [0, 75], [-21, 72], [-40, 62], [-56, 49], [-68, 31], [-75, -1], [-68, -33], [-56, -51], [-40, -64], [-21, -73]];
      end;

      ERSMode.FIXED:
      begin
        Self.Compass.Circle := [X1 - 9,  Y1 + 11,  16];
        Self.Orbs[ERSMinimapOrb.HITPOINTS].Circle := [X1 - 15, Y1 + 48,  12];
        Self.Orbs[ERSMinimapOrb.PRAYER].Circle    := [X1 - 15, Y1 + 82,  12];
        Self.Orbs[ERSMinimapOrb.ENERGY].Circle    := [X1 - 4,  Y1 + 115, 12];
        Self.Orbs[ERSMinimapOrb.SPECIAL].Circle   := [X1 + 17, Y1 + 140, 12];
        tpa := [[21, -71], [39, -62], [55, -49], [67, -32], [70, 0], [66, 19], [57, 32], [41, 43], [20, 58], [12, 71], [0, 74], [-11, 72], [-24, 55], [-47, 39], [-60, 31], [-66, 22], [-71, 0], [-72, -14], [-67, -32], [-55, -49], [-39, -62], [-21, -71], [0, -74]];
      end;
    end;

  MainScreen.AddMask(Self.Compass.Circle.Expand(4));
  MainScreen.AddMask(TPointArray.CreateFromCircle(Self.Center, 82, True));

  for i := 0 to High(Self.Orbs) do
    with Self.Orbs[i].Circle do
    begin
      Self.Orbs[i].Bounds := TBox.Create(X-35, Y-1, X-15, Y+9);
      MainScreen.AddMask(TPointArray.CreateFromCircle(Center, Radius+5, True));
    end;

  with Self.Orbs[ERSMinimapOrb.HITPOINTS].Bounds do
    MainScreen.AddMask([X1 - 5, Y1 - 5, X2 + 7, Y2 + 6]);

  with Self.Orbs[ERSMinimapOrb.PRAYER].Bounds do
    MainScreen.AddMask([X1 - 5, Y1 - 6, X2 + 7, Y2 + 5]);

  with Self.Orbs[ERSMinimapOrb.ENERGY].Bounds do
    MainScreen.AddMask([X1 - 5, Y1 - 5, X2 + 7, Y2 + 6]);

  with Self.Orbs[ERSMinimapOrb.SPECIAL].Bounds do
    MainScreen.AddMask([X1 - 5, Y1 - 7, X2 + 7, Y2 + 4]);

  Self.Center := Self.Bounds.Center;
  Self.Polygon := tpa.Offset(Self.Center);
end;

(*
## Minimap.Contains
```pascal
function TRSMinimap.Contains(pt: TPoint): Boolean;
```
Returns True/False if a point `pt` is on the minimap.

Example:
```pascal
WriteLn Minimap.Contains([100,100]);
```
*)
function TRSMinimap.Contains(pt: TPoint): Boolean;
begin
  Result := Self.Polygon.Contains(pt);
end;

(*
## Minimap.Filter
```pascal
function TRSMinimap.Filter(tpa: TPointArray): TPointArray;
```
Returns a TPA of the points from `tpa` that are within the minimap.

Example:
```pascal
tpa := TPointArray.CreateFromBox(Minimap.Bounds);
ShowOnTarget(Minimap.Filter(tpa));
```
*)
function TRSMinimap.Filter(tpa: TPointArray): TPointArray;
begin
  Result := tpa.ExtractPolygon(Self.Polygon);
end;


(*
## Minimap.RandomPoint
```pascal
function TRSMinimap.RandomPoint(pt: TPoint; randomness: Integer): TPoint;
```
Generates a random point on the minimap based on the point `pt` passed.
The distance of this random point will be within `randomness` amount of distance
from `pt`.

Example:
```pascal
while True do
  ShowOnTarget(Minimap.RandomPoint(Minimap.Center, 30));
```
*)
function TRSMinimap.RandomPoint(pt: TPoint; randomness: Integer): TPoint;
begin
  if not Self.Polygon.Contains(pt) then
    raise GetDebugLn('Minimap', ToStr(pt) + ' is not a valid point to generate a random point.');

  repeat
    Result := pt.Random(-randomness, randomness);
  until Self.Polygon.Contains(Result);
end;



(*
## Minimap.GetCompassAngle
```pascal
function TRSMinimap.GetCompassAngle(asDegrees: Boolean = True): Single;
```
Returns the minimap compass angle either in radians or degrees.
By default, degrees are used.

Credits: [slacky](https://slacky.one/)

Example:
```pascal
WriteLn Minimap.GetCompassAngle();
```
*)
function TRSMinimap.GetCompassAngle(asDegrees: Boolean = True): Single;
var
  center: TPoint;
  bounds: TBox;
  north,south,west,east: TPoint;
  Nclr, dials, southArr, westArr, eastArr: TPointArray;
  n,w,e,s,x,y: Single;
begin
  center := Self.Compass.Circle.Center;
  bounds := Self.Compass.Circle.Bounds;

  dials := Target.FindColor($26259C,  12, bounds);
  Nclr  := Target.FindColor($1D2931, 0.6, bounds);

  dials := dials.ExtractDist(center, 10, 20);
  north := Nclr.ExtractDist(center, 0,20).Mean();

  southArr := dials.ExtractDist(north, 21, 50);
  south    := southArr.FurthestPoint(center);

  dials  := dials.Difference(southArr);

  for dials in dials.Cluster(3) do
    if CrossProduct(dials.Mean(), north, south) > 0 then
      westArr := dials
    else
      eastArr := dials;

  west := westArr.FurthestPoint(eastArr.Mean()); //late edit: Should not this be middle, not eastarr.mean
  east := eastArr.FurthestPoint(westArr.Mean()); //late edit: Should not this be middle, not westarr.mean

  n := ArcTan2(north.y-center.y, north.x-center.x) + HALF_PI;
  s := ArcTan2(south.y-center.y, south.x-center.x) - HALF_PI;
  w := ArcTan2(west.y-center.y, west.x-center.x)+PI;
  e := ArcTan2(east.y-center.y, east.x-center.x);

  x := Cos(s) + Cos(e) + Cos(w) + Cos(n);
  y := Sin(s) + Sin(e) + Sin(w) + Sin(n);

  Result := ArcTan2(y/4, x/4);
  if Result < 0 then Result := Result + PI*2;

  if asDegrees then Result := RadToDeg(Result);
end;


(*
## Minimap.SetCompassAngle
```pascal
function TRSMinimap.SetCompassAngleEx(degrees, accuracy: Single): Boolean;
function TRSMinimap.SetCompassAngle(degrees: Single): Boolean;
function TRSMinimap.SetCompassAngle(minDegrees, maxDegrees: Single; accuracy: Single = 5): Boolean; overload;
```
Sets the current compass angle.
If you specify a minimum and a maximum angle a gaussian distribution will be used.

Example:
```pascal
Minimap.SetCompassAngle(180);
```
*)
function TRSMinimap.SetCompassAngleEx(degrees, accuracy: Single): Boolean;
const
  DEG_PER_PIXEL = 2.83;
var
  available: TBox;
  remaining: Integer;
  left2right: Boolean;
  destination: TPoint;
  pixels: Integer;
  timeout: UInt64;
begin
  available := RSClient.Bounds.Expand(-10);
  degrees := DegNormalize(degrees);
  timeout := Time() + RandomMean(6000, 8000);

  repeat
    remaining := Round(DeltaAngle(Self.GetCompassAngle(), degrees));
    if Abs(remaining) <= accuracy then Exit(True);

    pixels := Round(Abs(DeltaAngle(Self.GetCompassAngle(), degrees)) * DEG_PER_PIXEL);
    left2right := InRange(remaining, 1, 180) or (remaining < -180);

    if left2right then
    begin
      if (not available.Contains(Target.MouseXY)) or ((Target.MouseY + 200 > available.Y2) or (Target.MouseX + pixels > available.X2)) then
        Target.MouseMove([available.X1, available.Y1, available.X1 + 200, available.Y1 + 200]);

      destination.X := Target.MouseX + pixels;
    end
    else
    begin
      if (not available.Contains(Target.MouseXY)) or ((Target.MouseY + 200 > available.Y2) or (Target.MouseX - pixels < available.X1)) then
        Target.MouseMove([available.X2 - 200, available.Y1, available.X2, available.Y1 + 200]);

      destination.X := Target.MouseX - Pixels;
    end;

    destination.Y := Random(Target.MouseY + 100, available.Y2);

    Target.MouseDown(EMouseButton.MIDDLE);
    Target.MouseMove(destination);
    Target.MouseUp(EMouseButton.MIDDLE);

    Sleep(100, 1000, ERandomDir.LEFT);
  until Time() > timeout;

  WriteLn GetDebugLn('Minimap', 'SetCompassAngle timed out.', ELogLevel.WARN);
  //TODO:
  //if not RSClient.IsLoggedIn() then
  //  Login.LoginPlayer()
  //else
  //  Self.DebugLn('Make sure the setting "Middle mouse button controls the camera" is enabled in the game settings.');
end;

function TRSMinimap.SetCompassAngle(degrees: Single): Boolean;
begin
  Result := Self.SetCompassAngleEx(degrees, 5);
end;

function TRSMinimap.SetCompassAngle(minDegrees, maxDegrees: Single; accuracy: Single = 5): Boolean; overload;
var
  degrees: Single;
begin
  degrees := RandomMean(DegNormalize(minDegrees), DegNormalize(maxDegrees));
  Result := Self.SetCompassAngleEx(degrees, accuracy);
end;


(*
## Minimap.GetLevel
```pascal
function TRSMinimap.GetLevel(orb: ERSMinimapOrb): Integer;
```
Returns the level of the specified `orb`.

Example:
```pascal
WriteLn Minimap.GetLevel(ERSMinimapOrb.PRAYER);
```
*)
function TRSMinimap.GetLevel(orb: ERSMinimapOrb): Integer;
begin
  Result := OCR.RecognizeShadow(Self.Orbs[orb].Bounds, RSFonts.PLAIN_11, 0).ExtractInteger();
end;

(*
## Minimap.UnderLevel
```pascal
function TRSMinimap.UnderLevel(orb: ERSMinimapOrb; level: Integer): Boolean;
```
Returns true if the level of the specified `orb` is below the specified `level` threshold.

Example:
```pascal
WriteLn Minimap.UnderLevel(ERSMinimapOrb.PRAYER, 50);
```
*)
function TRSMinimap.UnderLevel(orb: ERSMinimapOrb; level: Integer): Boolean;
begin
  Result := Self.GetLevel(orb) < level;
end;

(*
## Minimap.OverLevel
```pascal
function TRSMinimap.OverLevel(orb: ERSMinimapOrb; level: Integer): Boolean;
```
Returns true if the level of the specified `orb` is over the specified `level` threshold.

Example:
```pascal
WriteLn Minimap.OverLevel(ERSMinimapOrb.PRAYER, 50);
```
*)
function TRSMinimap.OverLevel(orb: ERSMinimapOrb; level: Integer): Boolean;
begin
  Result := Self.GetLevel(orb) > level;
end;


(*
## Minimap Orb Status
```pascal
function TRSMinimap.Poisoned(): Boolean;
function TRSMinimap.Envenomed(): Boolean;
function TRSMinimap.RunEnabled(): Boolean;
function TRSMinimap.HasStamina(): Boolean;
function TRSMinimap.PrayerEnabled(): Boolean;
function TRSMinimap.SpecialEnabled(): Boolean;
function TRSMinimap.HasSpecialWeapon(): Boolean;
```
Returns a status from a minimap orb.

Example:
```pascal
WriteLn Minimap.Poisoned();
```
*)
function TRSMinimap.Poisoned(): Boolean;
begin
  Result := Target.HasColor(16391, 3, 1, Self.Orbs[ERSMinimapOrb.HITPOINTS].Circle.Bounds);
end;

function TRSMinimap.Envenomed(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($283818, 0.637, EColorSpace.HSL, [1.885, 0.891, 0.226]), 1, Self.Orbs[ERSMinimapOrb.HITPOINTS].Circle.Bounds);
end;

function TRSMinimap.RunEnabled(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($58B1CB, 4.504, EColorSpace.HSV, [1.869, 0.609, 0.524]), 1, Self.Orbs[ERSMinimapOrb.ENERGY].Circle.Bounds);
end;

function TRSMinimap.HasStamina(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($2D61C1, 1.475, EColorSpace.HSV, [2.455, 0.300, 0.247]), 1, Self.Orbs[ERSMinimapOrb.ENERGY].Circle.Bounds);
end;

function TRSMinimap.PrayerEnabled(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($2188AB, 10.980, EColorSpace.HSV, [1.317, 1.076, 0.609]), 1, Self.Orbs[ERSMinimapOrb.PRAYER].Circle.Bounds);
end;

function TRSMinimap.SpecialEnabled(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($999273, 1.308, EColorSpace.RGB, [0.122, 0.640, 2.240]), 1, Self.Orbs[ERSMinimapOrb.SPECIAL].Circle.Bounds);
end;

function TRSMinimap.HasSpecialWeapon(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($A68F56, 5.999, EColorSpace.RGB, [0.270, 1.494, 1.237]), 1, Self.Orbs[ERSMinimapOrb.SPECIAL].Bounds);
end;

(*
## Minimap.GetPercent
```pascal
function TRSMinimap.GetPercent(orb: ERSMinimapOrb): Integer;
```
Returns the percent remaining of the specified `orb`.

Example:
```pascal
WriteLn Minimap.GetPercent(ERSMinimapOrb.HITPOINTS);
```
*)
function TRSMinimap.GetPercent(orb: ERSMinimapOrb): Integer;
var
  tpa: TPointArray;
  col: TColorTolerance;
begin
  case orb of
    ERSMinimapOrb.HITPOINTS:
    begin
      col := ColorTolerance($030575, 1.242, EColorSpace.RGB, [0.064, 1.068, 1.869]);
      if Self.Poisoned  then col := ColorTolerance($02851C, 1.688, EColorSpace.LCH, [0.201, 0.166, 2.635]);
      if Self.Envenomed then col := ColorTolerance($27361A, 0.983, EColorSpace.LCH, [0.227, 0.346, 2.428]);
    end;
    ERSMinimapOrb.PRAYER:
    begin
      col := ColorTolerance($42232D, 2.354, EColorSpace.HSL, [1.309, 1.314, 0.378]);
      if Self.PrayerEnabled then col := ColorTolerance($643940, 6.384, EColorSpace.HSV, [1.045, 1.532, 0.424]);
    end;
    ERSMinimapOrb.ENERGY:  Exit(Self.GetLevel(orb));
    ERSMinimapOrb.SPECIAL: Exit(Self.GetLevel(orb));
  end;

  tpa := Target.FindColor(col, Self.Orbs[orb].Circle.Bounds.Expand(1));
  if Length(tpa) < 1 then Exit;
  tpa := tpa.SortByY(True);
  Result := Round(((tpa[High(TPA)].Y-tpa[0].Y)/25)*100);
end;


(*
## Minimap.Toggle
```pascal
function TRSMinimap.Toggle(orb: ERSMinimapOrb): Boolean;
```
Toggles a minimap orb. All orbs can be toggled except `ERSMinimapOrb.HITPOINTS`.

Example:
```pascal
if not Minimap.PrayerEnabled() then
  Minimap.Toggle(ERSMinimapOrb.PRAYER);
```
*)
function TRSMinimap.Toggle(orb: ERSMinimapOrb): Boolean;
var
  state: Boolean;
begin
  case orb of
    ERSMinimapOrb.HITPOINTS: Exit;
    ERSMinimapOrb.PRAYER:  state := Self.PrayerEnabled();
    ERSMinimapOrb.ENERGY:  state := Self.RunEnabled();
    ERSMinimapOrb.SPECIAL:
      if not Self.HasSpecialWeapon() then
        Exit
      else
        state := Self.SpecialEnabled();
  end;

  Mouse.Click(Self.Orbs[orb].Circle, EMouseButton.LEFT);

  case orb of
    ERSMinimapOrb.HITPOINTS: Exit;
    ERSMinimapOrb.PRAYER:  Result := Self.PrayerEnabled() <> state;
    ERSMinimapOrb.ENERGY:  Result := Self.RunEnabled() <> state;
    ERSMinimapOrb.SPECIAL: Result := Self.SpecialEnabled() <> state;
  end;
end;


(*
## Minimap.FindFlag
```pascal
function TRSMinimap.FindFlag(out pt: TPoint): Boolean;
```
Returns True/False if the minimap walking flag is visible on the minimap.
`pt` will return the coordinate where the flag was found.

Example:
```pascal
if Minimap.FindFlag(flagPt) then
  ShowOnTarget(TCircle.Create(flagPt.X, flagPt.Y, 6));
```
*)
function TRSMinimap.FindFlag(out pt: TPoint): Boolean;
begin
  pt := Target.FindImage(Self.FLAG, 0, Self.Bounds);
  Result := Self.Polygon.Contains(pt);
end;

(*
## Minimap.HasFlag
```pascal
function TRSMinimap.HasFlag(): Boolean;
```
Returns True/False if the minimap walking flag is visible on the minimap.
Same as `Minimap.FindFlag()` but without the need for parameters.

Example:
```pascal
WriteLn Minimap.HasFlag();
```
*)
function TRSMinimap.HasFlag(): Boolean;
var
  p: TPoint;
begin
  Result := Self.FindFlag(p);
end;

(*
## Minimap.WaitFlag
```pascal
function TRSMinimap.WaitFlag(time: Integer = 600; interval: Integer = -1): Boolean;
```
Returns True/False if the minimap walking flag becomes (or already is) visible
within `time` milliseconds.

Example:
```pascal
pt := Minimap.RandomPoint(Minimap.Center, 30);
Mouse.Click(pt, EMouseButton.LEFT);
WriteLn Minimap.WaitFlag(2000);
```
*)
function TRSMinimap.WaitFlag(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.HasFlag(), interval, time);
end;


(*
## Minimap.Normalize
```pascal
function TRSMinimap.Normalize(pt: TPoint; angle: Single): TPoint;
function TRSMinimap.NormalizeEx(vector: Vector2; angle: Single): Vector2;
```
Normalizes minimap coordinates to 0º.
Basically, whatever `pt` or `vector` you pass into this, will be rotated to it's
position on the minimap at 0º.
`angle` should be in radians.

Example:
```pascal
pt := Minimap.RandomPoint(Minimap.Center, 30);
angle := Minimap.GetCompassAngle(False);
pt := Minimap.Normalize(pt, angle);
ShowOnTarget(TCircle.Create(pt.X, pt.Y, 6));
```
*)
function TRSMinimap.Normalize(pt: TPoint; angle: Single): TPoint;
begin
  with pt.Rotate(-angle, Self.Center) do
  begin
    Result.X := Round((X - Self.Center.X) / 4) * 4 + Self.Center.X;
    Result.Y := Round((Y - Self.Center.Y) / 4) * 4 + Self.Center.Y;
  end;
end;

function TRSMinimap.NormalizeEx(vector: TVector2; angle: Single): TVector2;
begin
  with vector.Rotate(-angle, Self.Center.X, Self.Center.Y) do
  begin
    Result.X := Round((X - Self.Center.X) / 4) * 4 + Self.Center.X;
    Result.Y := Round((Y - Self.Center.Y) / 4) * 4 + Self.Center.Y;
  end;
end;


(*
## Minimap.GetDots
```pascal
function TRSMinimap.GetDots(dot: ERSMinimapDot; bounds: TBox): TPointArray;
function TRSMinimap.GetDots(dot: ERSMinimapDot): TPointArray; overload;
function TRSMinimap.GetDots(dots: ERSMinimapDots; bounds: TBox): TRSMinimapDotArray; overload;
function TRSMinimap.GetDots(dots: ERSMinimapDots = [ERSMinimapDot.PLAYER, ERSMinimapDot.NPC, ERSMinimapDot.ITEM]): TRSMinimapDotArray; overload;
```
Returns minimap dots found.
You can specify which dots you want to look for in `dot` or `dots`.
You can also optionalyl specify `bounds` to returns minimap dots from just a region of the minimap.

Example:
```pascal
tpa := Minimap.GetDots(ERSMinimapDot.NPC);
for pt in tpa do
  boxes += TBox.Create(pt, 6, 6);
ShowOnTarget(boxes);
```
*)
function TRSMinimap.GetDots(dot: ERSMinimapDot; bounds: TBox): TPointArray;
const
  COLORS: array [ERSMinimapDot] of array [0..1] of TColor = [
    [$FEFEFE, $ECECEC], [$02FCFC, $00EDED], [$0606FC, $0000F1]
  ];
var
  img: TImage;
  y,x: Integer;
begin
  bounds := bounds.Clip(Self.Polygon.Bounds());
  img := Target.GetImage(bounds);

  for y := 0 to img.Height-2 do
    for x := 0 to img.Width-2 do
      if (img.Pixel[x,y] = COLORS[dot][0]) and (img.Pixel[x+1,y] = COLORS[dot][1]) then
        Result += [x + bounds.X1+2, y + bounds.Y1-1];
end;

function TRSMinimap.GetDots(dot: ERSMinimapDot): TPointArray; overload;
begin
  Result := Self.GetDots(dot, Self.Polygon.Bounds());
end;

function TRSMinimap.GetDots(dots: ERSMinimapDots; bounds: TBox): TRSMinimapDotArray; overload;
var
  dot: ERSMinimapDot;
  angle: Single;
begin
  angle := Self.GetCompassAngle(False);
  for dot in dots do
    Result[dot] := Target.FindImageEx(Self.DotIMGs[dot], 0, -1, bounds.Clip(Self.Polygon.Bounds()));
end;

function TRSMinimap.GetDots(dots: ERSMinimapDots = [ERSMinimapDot.PLAYER, ERSMinimapDot.NPC, ERSMinimapDot.ITEM]): TRSMinimapDotArray; overload;
begin
  Result := Self.GetDots(dots, Self.Polygon.Bounds());
end;


(*
## Minimap.CleanImage
```pascal
function TRSMinimap.CleanImage(img: TImage): TImage;
```
Cleans a TImage of the minimap you pass into it.
"Clean" means that minimap dots are removed and the colors around it will be
blended in.

Example:
```pascal
rawIMG := Target.GetImage(Minimap.Bounds);
cleanIMG := Minimap.CleanImage(rawIMG);
rawIMG.Free();

cleanIMG.Show();
cleanIMG.Free();
```
*)
function TRSMinimap.CleanImage(img: TImage): TImage;
var
  dots: TRSMinimapDotArray;
  dot: ERSMinimapDot;
  topLeft, p: TPoint;
  tpa: TPointArray;
begin
  topLeft := Self.Polygon.Bounds().TopLeft;

  dots := Self.GetDots();
  for dot := ERSMinimapDot.PLAYER to ERSMinimapDot.ITEM do
    for p in dots[dot] do
      img.DrawCircleFilled(p.Offset(-topLeft.X, -topLeft.Y).Offset(1, 2), 2);
  img.DrawCircleFilled(img.Center, 2);

  //idk what the heck is this 3 lines
  img.ReplaceColor($0000FF, $0);
  img.ReplaceColor($0456C6, $0);
  img.ReplaceColor($11335D, $0);

  img.DrawColor := $0;
  img.DrawImage(Self.Mask, [0,0]);

  tpa := img.FindColor($0, 0) + img.FindColor($010000, 0);
  tpa := tpa.SortFrom(img.Center);

  Result := img.Blend(tpa, 8);
  Result.Pad(10);
end;

(*
## Minimap.GetCleanImage
```pascal
function TRSMinimap.GetCleanImage(angle: Single = $FFFF): TImage;
```
Returns a clean TImage of the minimap. Read `Minimap.CleanImage()` for more information.
The image returns is also rotated to 0º.

Example:
```pascal
img := Minimap.GetCleanImage();
img.Show();
img.Free();
```
*)
function TRSMinimap.GetCleanImage(angle: Single = $FFFF): TImage;
var
  img, clean: TImage;
begin
  if angle = $FFFF then angle := Self.GetCompassAngle(False);
  img := Target.GetImage(Self.Bounds);
  img.ReplaceColor(0, 1);
  clean := Self.CleanImage(img);
  Result := clean.Rotate(EImageRotateAlgo.BILINEAR, angle, False);
end;

(*
## Minimap.ScaleMinimap
```pascal
function TRSMinimap.ScaleMinimap(img: TImage; scaling: Integer; radius: Integer = 67): TImage;
```
Scales down a minimap TImage passed in the `img` parameter.

Example:
```pascal
cleanIMG := TImage.GetCleanImage();
scaledIMG := Minimap.ScaleMinimap(cleanIMG, 4);
cleanIMG.Free();

scaledIMG.Show();
scaledIMG.Free();
```
*)
function TRSMinimap.ScaleMinimap(img: TImage; scaling: Integer; radius: Integer = 67): TImage;
var
  center: TPoint;
  tmp, blend: TImage;
  tpa: TPointArray;
begin
  tmp := img.Copy();

  center := tmp.Center;
  if RSClient.Mode = ERSMode.FIXED then
    center := center.Offset(0, -8).Rotate(-Self.GetCompassAngle(False), center);

  radius += 6;

  tmp.Crop(TBox.Create(center, radius, radius));
  tpa := tmp.FindColor($0, 0).SortFrom(tmp.Center);

  blend := tmp.Blend(tpa, 30);
  Result := blend.Downsample(scaling);

  Result.DrawColor := $0;
  Result.DrawCircleInverted(Result.Center, radius div scaling);
end;


(*
## Minimap.IsPlayerMoving
```pascal
function TRSMinimap.IsPlayerMoving(minShift: Integer = 500): Boolean;
```
Returns whether the player is moving or not according to the specified minimum pixel shift.

Example:
```pascal
WriteLn Minimap.IsPlayerMoving();
```
*)
function TRSMinimap.IsPlayerMoving(minShift: Integer = 500): Boolean;
begin
  Result := Target.GetPixelDifference(300, TBox.Create(Self.Center, 40, 40)).Length >= minShift;
end;

procedure TRSMinimap.WaitMoving(time: Integer = 20000; minShift: Integer = 500);
var
  timeout, countdown: TCountDown;
  moving: Boolean;
begin
  timeout.Start(time);
  countdown.Start(500);

  repeat
    moving := Self.IsPlayerMoving(minShift);
    if moving then countdown.Restart(0, 1000);
  until timeout.IsFinished or (not moving and countdown.IsFinished) or not Self.HasFlag();
end;

var
(*
## Minimap variable
Global {ref}`TRSMinimap` variable.
*)
  Minimap: TRSMinimap;
