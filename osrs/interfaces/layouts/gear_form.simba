(*
# Gear Form
This page is about {ref}`TGearLayout` dedicated `TLazForm` utilities.

This is meant to be used with {ref}`TScriptForm` with
{ref}`TScriptForm.CreateGearTab` and will setup a a `TLazTabSheet` on it with
several controls to configure the {ref}`TGearLayout`:
```{figure} ../../images/gearform.png
```
*)

{$DEFINE WL_GEAR_FORM_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
  TGearFormHelper = record
    Index: Integer;
    Selected: ERSEquipment;
    SlotBoxes: TBoxArray;

    Gear: TRSGear;
    Tab: TLazTabSheet;

    //this is a bit crazy, 12+12 TLazListBoxes, but it's so the UI feels snappy and responsive.
    FilteredLists: array [ERSEquipment] of TLazListBox;
    ItemLists: array [ERSEquipment] of TLazListBox;

    LayoutCombobox: TLazComboBox;
    LayoutName: TLazEdit;
    ListLabel: TLazLabel;
    UnfilterButton: TLazButton;
    ImageBox: TImageBox;

    const SLOT_NAMES: TStringArray = [
      'Head', 'Cape', 'Necklace', 'Ammunition', 'Weapon', 'Body', 'Shield',
      'Legs', 'Hands', 'Feet', 'Ring', 'Secondary Ammunition'
    ];
    const SLOT_IMG: TImage = ImageFromString('IMG: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');
    const BACKGROUND_IMG: TImage = ImageFromString('IMG:');
  end;

procedure TGearFormHelper.UpdateListBox();
var
  idx, i: Integer;
begin
  if Self.ItemLists[Self.Selected].Items.Count = 0 then
  begin
    Self.ItemLists[Self.Selected].Items.BeginUpdate();
    Self.ItemLists[Self.Selected].Items.Add('Nothing');
    Self.ItemLists[Self.Selected].Items.Add('Anything');

    idx := Ord(Self.Selected);
    if idx = 11 then idx := 3;
    for i := 0 to GearData.Data.Item[idx].Count-1 do
      Self.ItemLists[Self.Selected].Items.Add(
        GearData.Data.Item[idx].Item[i].AsString.Capitalize()
      );

    Self.ItemLists[Self.Selected].Items.EndUpdate();
  end;

  i := Self.ItemLists[Self.Selected].Items.IndexOf(Self.Gear.Items[Self.Selected]);
  if i > 0 then
    Self.ItemLists[Self.Selected].ItemIndex := i;
end;

procedure TGearFormHelper.UpdateFilters(slot: ERSEquipment; items: TStringArray = []);
begin
  Self.FilteredLists[slot].Items.BeginUpdate();
  Self.FilteredLists[slot].Clear();
  Self.FilteredLists[slot].Items.Add('Nothing');
  Self.FilteredLists[slot].Items.Add('Anything');
  Self.FilteredLists[slot].Items.AddStrings(items);
  if items <> [] then
    Self.FilteredLists[slot].ItemIndex := 2
  else
    Self.FilteredLists[slot].ItemIndex := 1;
  Self.FilteredLists[slot].Items.EndUpdate();
end;

procedure TGearFormHelper.DrawItem(slot: ERSEquipment; background: TImage);
var
  id: String;
  img, item: TImage;
begin
  id := ItemFinder.Database.Get(Self.Gear.Items[slot].ToLower(), 'item', 'id');
  img := Self.SLOT_IMG.Copy();
  item := ItemFinder.GetImage(id);

  img.DrawImage(item, [2,2]);
  background.DrawImage(img, Self.SlotBoxes[slot].TopLeft);
end;

procedure TGearFormHelper.UpdateBackground();
var
  slot: ERSEquipment;
  bg: TImage;
begin
  bg := Self.BACKGROUND_IMG.Copy();

  for slot := Low(ERSEquipment) to High(ERSEquipment) do
    case Self.Gear.Items[slot] of
      '', 'Nothing': ;
      'Anything': ; //TODO....
      else Self.DrawItem(slot, bg);
    end;

  Self.ImageBox.SetImage(bg);
end;


{$H-}
procedure TGearFormHelper.OnImgPaint(sender: TImageBox; canvas: TImageBoxCanvas; r: TLazRect);
var
  slot: ERSEquipment;
begin
  for slot := Low(ERSEquipment) to High(ERSEquipment) do
    if slot = Self.Selected then
      canvas.DrawBox(Self.SlotBoxes[slot], $00FF00);
end;

procedure TGearFormHelper.OnSelectionChange(sender: TLazObject; user: Boolean);
begin
  Self.Gear.Items[Self.Selected] := TLazListBox(sender).GetSelectedText();
  Self.UpdateBackground();
end;

procedure TGearFormHelper.OnSaveClick(sender: TLazObject);
begin
  Self.Gear.Name := Self.LayoutName.Text;
  Self.LayoutCombobox.Items.Strings[Self.Index] := Self.LayoutName.Text;

  if Self.Index = (High(GearLayouts.Sets) + 1) then
    GearLayouts.AddLayout(Self.Gear)
  else
    GearLayouts.Sets[Self.Index] := Self.Gear;
  GearLayouts.UpdateConfig();
end;

procedure TGearFormHelper.OnDuplicateClick(sender: TLazObject);
var
  gear: TRSGear;
begin
  gear := GearLayouts.Sets[Self.Index];
  gear.Name += ' duplicate';
  GearLayouts.AddLayout(gear);
  Self.LayoutCombobox.Items.Add(gear.Name);
  Self.LayoutCombobox.ItemIndex := High(GearLayouts.Sets);
  Self.LayoutOnChange(Self.LayoutCombobox);
end;

procedure TGearFormHelper.OnRemoveClick(sender: TLazObject);
begin
  if Self.Index = (High(GearLayouts.Sets) + 1) then Exit;

  GearLayouts.RemoveLayout(Self.Index);
  Self.LayoutCombobox.Items.Delete(Self.Index);
  Self.LayoutCombobox.ItemIndex := High(GearLayouts.Sets);
  Self.LayoutOnChange(Self.LayoutCombobox);
end;
{$H+}

procedure TGearFormHelper.OnImgClick(sender: TImageBox; x, y: Integer);
var
  i: Integer;
begin
  i := Self.SlotBoxes.ContainsPoint([x,y]);
  if i >= 0 then
  begin
    Self.ItemLists[Self.Selected].Hide();
    Self.ItemLists[Self.Selected].Enabled := False;
    Self.FilteredLists[Self.Selected].Hide();
    Self.FilteredLists[Self.Selected].Enabled := False;

    Self.Selected := ERSEquipment(i);
    Self.ListLabel.Caption := 'Selected slot: ' + Self.SLOT_NAMES[Self.Selected];
    Self.UpdateListBox();

    if Self.UnfilterButton.Enabled then
    begin
      Self.FilteredLists[Self.Selected].Show();
      Self.FilteredLists[Self.Selected].Enabled := True;
    end
    else
    begin
      Self.ItemLists[Self.Selected].Show();
      Self.ItemLists[Self.Selected].Enabled := True;
    end;
  end;

  sender.Repaint();
end;


procedure TGearFormHelper.LayoutOnChange(sender: TLazObject);
var
  slot: ERSEquipment;
begin
  Self.Index := TLazComboBox(sender).ItemIndex;
  if Self.Index > High(GearLayouts.Sets) then
  begin
    Self.Gear.Name := TLazComboBox(sender).Text;
    for slot := Low(ERSEquipment) to High(ERSEquipment) do
      Self.Gear.Items[slot] := 'Nothing';
    Self.Gear.SpecLevel := 0;
  end
  else
    Self.Gear := GearLayouts.Sets[Self.Index];
  Self.LayoutName.Caption := TLazComboBox(sender).Text;
  Self.UpdateBackground();
end;

procedure TGearFormHelper.OnReadClick(sender: TLazObject);
var
  btn: TLazButton;
  slot: ERSEquipment;
  items: TRSItemArray;
begin
  btn := TLazButton(sender);
  btn.Caption := 'Loading...';
  btn.Font.Style := btn.Font.Style - [ELazFontStyles.fsBold];
  btn.Enabled := False;
  btn.Update();

  for slot := Low(ERSEquipment) to High(ERSEquipment) do
  begin
    items := Equipment.Items.Discover(Ord(slot));

    if items <> [] then
      Self.Gear.Items[slot] := items[0]
    else
      Self.Gear.Items[slot] := 'Nothing';

    Self.UpdateFilters(slot, items);
  end;

  Self.UpdateBackground();

  Self.ItemLists[Self.Selected].Hide();
  Self.ItemLists[Self.Selected].Enabled := False;
  Self.FilteredLists[Self.Selected].Show();
  Self.FilteredLists[Self.Selected].Enabled := True;

  btn.Caption := 'Read From Client';
  btn.Font.Style := [ELazFontStyles.fsBold];
  btn.Enabled := True;
  Self.UnfilterButton.Enabled := True;
end;

procedure TGearFormHelper.OnUnfilterClick(sender: TLazObject);
begin
  Self.FilteredLists[Self.Selected].Hide();
  Self.FilteredLists[Self.Selected].Enabled := False;

  Self.ItemLists[Self.Selected].Show();
  Self.ItemLists[Self.Selected].Enabled := True;

  TLazButton(sender).Enabled := False;
end;

procedure TGearFormHelper.OnSearchChange(sender: TLazObject);
var
  i: Integer;
begin
  if TLazEdit(sender).IsEmpty() then Exit;
  i := Self.ItemLists[Self.Selected].Search(TLazEdit(sender).Text);
  if i > 0 then
    Self.ItemLists[Self.Selected].ItemIndex := i;
end;


var
  GearForm: TGearFormHelper;

function TScriptForm.CreateGearTab(): TLazTabSheet;
var
  lbl: TLazLabel;
  save, duplicate, remove, read: TLazButton;
  width: Integer;
  i: Integer;
  slot: ERSEquipment;
  search: TLazEdit;
begin
  GearLayouts.Setup();
  GearData.Setup();

  GearForm.Tab := Result := Self.CreateTab('Gear Layouts');
  width := 280;

  GearForm.ListLabel := TLazLabel.CreateEx(Result, 'Selected slot: ' + GearForm.SLOT_NAMES[GearForm.Selected], 'Click a slot on the right side to update the list below.');
  GearForm.ListLabel.Left := 40;
  GearForm.ListLabel.Top := 20;

  lbl := TLazLabel.CreateEx(Result, 'Search:' , 'Search the list below.');
  lbl.AnchorVertically(GearForm.ListLabel, 20);

  search := TLazEdit.CreateEx(Result, '', 'Search the list below.', width);
  search.AnchorVertically(lbl);
  search.OnChange := @GearForm.OnSearchChange;

  for slot := Low(ERSEquipment) to High(ERSEquipment) do
  begin
    GearForm.ItemLists[slot] := TLazListBox.CreateEx(Result, '', 'Click a slot on the right side to update the list below.', width, 340);
    GearForm.ItemLists[slot].AnchorVertically(search, 10);
    GearForm.ItemLists[slot].OnSelectionChange := @GearForm.OnSelectionChange;
    if slot <> ERSEquipment.HEAD then
    begin
      GearForm.ItemLists[slot].Hide();
      GearForm.ItemLists[slot].Enabled := False;
    end;

    GearForm.FilteredLists[slot] := TLazListBox.CreateEx(Result, '', 'Click a slot on the right side to update the list below.', width, 340);
    GearForm.ItemLists[slot].AnchorVertically(search, 10);
    GearForm.FilteredLists[slot].OnSelectionChange := @GearForm.OnSelectionChange;
    GearForm.FilteredLists[slot].Hide();
    GearForm.FilteredLists[slot].Enabled := False;
  end;

  GearForm.UnfilterButton := TLazButton.CreateEx(Result, 'Remove list filter', 'Remove the current filter.', width);
  GearForm.UnfilterButton.AnchorVertically(GearForm.ListLabel, 440);
  GearForm.UnfilterButton.Enabled := False;
  GearForm.UnfilterButton.OnClick := @GearForm.OnUnfilterClick;

  lbl := TLazLabel.CreateEx(Result, 'Layout:' , 'Select a gear layout.');
  lbl.Left := Integer(Result.Width) - width - 80;
  lbl.Top := 20;
  GearForm.LayoutCombobox := TLazComboBox.CreateEx(Result, '', 'Select a gear layout.', width);
  GearForm.LayoutCombobox.AnchorVertically(lbl);
  for i := 0 to High(GearLayouts.Sets) do
    GearForm.LayoutCombobox.Items.Add(GearLayouts.Sets[i].Name);
  GearForm.LayoutCombobox.Items.Add('New Layout');
  GearForm.LayoutCombobox.ItemIndex := 0;
  GearForm.LayoutCombobox.OnChange := @GearForm.LayoutOnChange;

  lbl := TLazLabel.CreateEx(Result, 'Layout name:' , 'Select a gear layout.');
  lbl.AnchorVertically(GearForm.LayoutCombobox, 10);

  GearForm.LayoutName := TLazEdit.CreateEx(Result, '', 'Change the current layout name.', width);
  GearForm.LayoutName.AnchorVertically(lbl);

  save := TLazButton.CreateEx(Result, 'Save' , 'Save the current gear layout.');
  save.AnchorVertically(GearForm.LayoutName, 10);
  save.BorderSpacing.Left := 18;
  save.OnClick := @GearForm.OnSaveClick;

  duplicate := TLazButton.CreateEx(Result, 'Duplicate' , 'Duplicate the current gear layout.');
  duplicate.AnchorHorizontally(save, 10);
  duplicate.OnClick := @GearForm.OnDuplicateClick;

  remove := TLazButton.CreateEx(Result, 'Remove' , 'Remove the current gear layout.');
  remove.AnchorHorizontally(duplicate, 10);
  remove.OnClick := @GearForm.OnRemoveClick;

  GearForm.ImageBox := TImageBox.CreateEx(Result, '', '', 204, 275);
  GearForm.ImageBox.Left   := Integer(Result.Width) - width - 36;
  GearForm.ImageBox.Top    := 170;
  GearForm.ImageBox.AllowZoom := True;
  GearForm.ImageBox.AllowMoving := False;
  GearForm.ImageBox.ShowScrollBars := False;
  GearForm.ImageBox.ShowStatusBar := False;
  GearForm.ImageBox.OnImgPaint := @GearForm.OnImgPaint;
  GearForm.ImageBox.OnImgClick := @GearForm.OnImgClick;
  GearForm.UpdateBackground();

  read := TLazButton.CreateEx(Result, 'Read From Client' , 'Read the layout from the client.');
  read.Width := 204;
  read.Font.Style := [ELazFontStyles.fsBold];
  read.AnchorVertically(GearForm.ImageBox, 10);
  read.OnClick := @GearForm.OnReadClick;

  GearForm.SlotBoxes := Equipment.GetSlots([10, 36]);
  GearForm.UpdateListBox();
  GearForm.LayoutOnChange(GearForm.LayoutCombobox);
end;
