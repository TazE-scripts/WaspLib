(*
# RSObjects
This page is about {ref}`RSObjects` which are an interface for interacting with
game objects, NPCs, and ground items.
*)

{$DEFINE WL_RSOBJECTS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## ERSMapObjectType
```pascal
ERSMapObjectType = (OBJ, NPC, ITEM);
```
Enum representing the different types of map objects.
- OBJ: Static objects without minimap dots
- NPC: NPCs with yellow minimap dots
- ITEM: Ground items with red minimap dots
*)
  ERSMapObjectType = (OBJ, NPC, ITEM);

(*
## TRSObject
Main type to handle all {ref}`RSObjects` including static objects, NPCs, and ground items.
*)
  TRSObject = record
    ObjectType: ERSMapObjectType;
    UpText: TStringArray;
    Size: TVector3;
    Coordinates: TPointArray;
    Rotations: TIntegerArray;    // Used by OBJ type
    Filter: TRSDotFilter;        // Used by NPC/ITEM types
    Finder: TColorFinder;
    UseDot: Boolean;             // Used by NPC/ITEM types
    Track: Boolean;
    Walker: PRSWalker;
  end;

(*
## TRSObjectArray
Array of {ref}`TRSObject`.
*)
  TRSObjectArray = array of TRSObject;

(*
## RSObject.Create
```pascal
function TRSObject.Create(objectType: ERSMapObjectType; size: TVector3; coordinates: TPointArray): TRSObject; static;
function TRSObject.Create(objectType: ERSMapObjectType; json: TJSONItem): TRSObject; static; overload;
```
Constructor functions to build your {ref}`TRSObject`.

The `json` version of the function expects a specific json structure which is
the one that {ref}`Map JSONs` provide.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  obj: TRSObject;
begin
  Map.Setup([ERSChunk.VARROCK]);
  //Item[0] because this returns a JSON array. For more info read Map JSONs documentation.
  obj := TRSObject.Create(ERSMapObjectType.OBJ, ObjectsJSON.GetByName('bank', 1).Item[0]);
end;
```
*)
function TRSObject.Create(objectType: ERSMapObjectType; size: TVector3; coordinates: TPointArray): TRSObject; static;
begin
  Result.ObjectType := objectType;
  Result.Coordinates := coordinates;
  Result.Size := size;
  
  if objectType = ERSMapObjectType.OBJ then
  begin
    SetLength(Result.Rotations, Length(coordinates));
  end;
end;

function TRSObject.Create(objectType: ERSMapObjectType; json: TJSONItem): TRSObject; static; overload;
var
  i: Integer;
  colors: TColorArray;
  best: TBestColor;
  coordIndex, sizeIndex, rotationIndex, colorIndex: Integer;
begin
  if json.Typ <> EJSONType.OBJ then
    raise GetDebugLn('TRSObject', 'JSON Object expected, got ' + ToStr(json.Typ) + '.');

  Result.ObjectType := objectType;

  if json.Item[1].AsString <> 'null' then
    Result.UpText := [json.Item[1].AsString];

  // Different JSON indices based on object type
  case objectType of
    ERSMapObjectType.OBJ:
      begin
        coordIndex := 5;
        sizeIndex := 6;
        rotationIndex := 7;
        colorIndex := 8;
      end;
    ERSMapObjectType.NPC:
      begin
        Result.UseDot := json.Item[4].AsBool; // minimap dot flag
        coordIndex := 7;
        sizeIndex := 6;
        colorIndex := 8;
      end;
    ERSMapObjectType.ITEM:
      raise GetDebugLn('TRSObject', 'JSON parsing for ITEM type not yet implemented.');
  end;

  // Parse coordinates
  for i := 0 to json.Item[coordIndex].Count-1 do
    Result.Coordinates += [json.Item[coordIndex].Item[i].Item[0].AsInt, json.Item[coordIndex].Item[i].Item[1].AsInt];

  // Parse size
  Result.Size.X := Round(json.Item[sizeIndex].Item[0].AsInt * 0.8, 2);
  Result.Size.Y := Round(json.Item[sizeIndex].Item[1].AsInt * 0.8, 2);
  Result.Size.Z := Round(json.Item[sizeIndex].Item[2].AsInt / 40, 2);

  if Result.Size.Z = 0.0 then
    Result.Size.Z := 3.0;

  // Parse rotations (only for OBJ type)
  if objectType = ERSMapObjectType.OBJ then
  begin
    for i := 0 to json.Item[rotationIndex].Count-1 do
      Result.Rotations += json.Item[rotationIndex].Item[i].AsInt;

    while Length(Result.Rotations) < Length(Result.Coordinates) do
      Result.Rotations += Result.Rotations[High(Result.Rotations)];
  end;

  // Parse colors
  for i := 0 to json.Item[colorIndex].Count-1 do
    colors += json.Item[colorIndex].Item[i].AsInt;

  if colors <> [] then
  begin
    best := GetBestColor(EColorSpace.HSV, colors);
    Result.Finder.Colors += [best.Color, best.Tolerance, EColorSpace.HSV, best.Mods];
  end;

  Result.Walker := @Map.Walker;
end;

(*
## RSObjectArray.Create
```pascal
function TRSObjectArray.Create(objectType: ERSMapObjectType; json: TJSONItem): TRSObjectArray; static; overload;
```
Constructor function to build your {ref}`TRSObjectArray`.

This only accepts a `json` array and it expects a specific json structure which is
the one that {ref}`Map JSONs` provide.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ERSMapObjectType.OBJ, ObjectsJSON.GetByName('bank'));
end;
```
*)
function TRSObjectArray.Create(objectType: ERSMapObjectType; json: TJSONItem): TRSObjectArray; static; overload;
var
  i: Integer;
begin
  if json.Typ <> EJSONType.ARR then
    raise GetDebugLn('TRSObject', 'JSON Array expected, got ' + ToStr(json.Typ) + '.');

  SetLength(Result, json.Count);
  for i := 0 to High(Result) do
    Result[i] := TRSObject.Create(objectType, json.Item[i]);
end;


(*
## RSObject.GetCuboidArray
```pascal
function TRSObject.GetCuboidArray(me: TPoint; angle: Single = $FFFF): TCuboidArray;
```
Internal function that returns an array of cuboids of the object if it's
coordinates are visible on the {ref}`MainScreen`.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  cuboids: TCuboidArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  cuboids := objs[1].GetCuboidArray(Map.Position());
  ShowOnTarget(cuboids);
end.
```

```{figure} ../../images/objs_cuboids.png
```
*)
function TRSObject.GetCuboidArray(me: TPoint; angle: Single = $FFFF): TCuboidArray;
var
  weights: TDoubleArray;
  pt: TPoint;
  h, diff: Single;
  i: Integer;
  dist: Double;
  vec2: TVector2;
  vec3: TVector3;
  dots: TPointArray;
  dotType: ERSMinimapDot;
  rotation: Single;
begin
  if angle = $FFFF then angle := Minimap.GetCompassAngle(False);

  h := Self.Walker^.Height(me);

  // Handle NPC/ITEM types with minimap dots
  if (Self.ObjectType in [ERSMapObjectType.NPC, ERSMapObjectType.ITEM]) and 
     (Self.Filter <> []) then
  begin
    // Select appropriate dot type
    case Self.ObjectType of
      ERSMapObjectType.NPC:  dotType := ERSMinimapDot.NPC;
      ERSMapObjectType.ITEM: dotType := ERSMinimapDot.ITEM;
    end;
    
    dots := Minimap.GetFilteredDotArray(dotType, Self.Walker^.FiltersToMM(me, [Self.Filter], angle));
    if dots = [] then Exit;

    dots := dots.SortFrom(Minimap.Center);
    for i := 0 to High(dots) do
    begin
      pt := Self.Walker^.MM2Map(me, dots[i], angle); // transfer back from minimap grid to map grid
      pt := RSTranslator.NormalizeNearestTile(pt) + [2,2]*(Ceil(Max(Self.Size.X, Self.Size.Y))-1); //Go from topleft corner to center
      diff := -(h-Self.Walker^.Height(pt))/4;
      vec2 := Self.Walker^.Point2MMVec(me, pt, angle); //translate back to MM space, use vectors to avoid rounding errors
      vec3 := vec2.ToVec3(diff);
      Result += Minimap.Vector2MSCuboid(vec3, Self.Size, angle, [0,0,diff]);
    end;
  end 
  else // Handle static objects and NPCs/items without filters
  begin
    for i := 0 to High(Self.Coordinates) do
    begin
      pt := Self.Coordinates[i];
      dist := me.DistanceTo(pt);
      if dist <= 85 then
      begin
        weights += dist;
        diff := -(h-Self.Walker^.Height(pt));
        
        // Apply rotation only for OBJ type
        if Self.ObjectType = ERSMapObjectType.OBJ then
          rotation := angle - DegToRad(Self.Rotations[i])
        else
          rotation := angle;
          
        with Self.Walker^.Point2MMVec(me, pt, angle) do
          Result += Minimap.Vector2MSCuboid([X + 0.15*diff, Y + 0.11*diff, 0], Self.Size, rotation, [0,0,diff]);
      end;
    end;

    if Result <> [] then
      Result.Sort(weights, True);
  end;
end;

(*
## RSObject.FindOnMainScreen
```pascal
function TRSObject.FindOnMainScreen(cuboidArray: TCuboidArray): T2DPointArray;
```
Internal TRSObject method responsible for filtering a TCuboidArray by what's
visible in the mainscren.

This is meant to filter {ref}`TRSObject.GetCuboidArray` so targets that are
outside of the mainscreen are filtered out.

You will probably never need to use this directly.
*)
function TRSObject.FindOnMainScreen(cuboidArray: TCuboidArray): T2DPointArray;
var
  i: Integer;
  tpa: TPointArray;
begin
  if Self.Finder <> Default(TColorFinder) then
  begin
    Self.Finder.Find(Result, cuboidArray);
    Exit;
  end;

  for i := 0 to High(cuboidArray) do
  begin
    tpa := cuboidArray[i].ShapeFill();
    if tpa <> [] then
      Result += tpa;
  end;
end;

(*
## RSObject.FindEx
```pascal
function TRSObject.FindEx(me: TPoint; out cuboids: TCuboidArray; out atpa: T2DPointArray): Boolean;
```
Internal {ref}`TRSObject` method used to find a {ref}`RSObject`.
If found returns true, if not returns false.

You also have {ref}`RSObject.Find` to find objects, this version of the method
is internal because it returns extra information about the found objects for
internal use, like it's `cuboids` for example.

This also returns an `atpa` containing the colors of the object that were found
assuming the object has a {ref}`TColorFinder` setup.
If not, the cuboids area are returned as the match.

This extra information is easy to see when you debug your object with
`ShowOnTarget(TRSObject)`:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  ShowOnTarget(objs[1]);
end.
```

```{figure} ../../images/objs_showontarget.png
```

As you can see, this image is very similar to the one in
{ref}`RSObject.GetCuboidArray`, they differ however in the fact that this one,
aside from the cuboids also shows the object colors that were found within
the cuboids.

This object colors is what's returned through the `atpa` and is what would be
clicked if you use {ref}`RSObject.Click` for example.

Assuming your `RSObject`does not have a {ref}`TColorFinder` setup, this is what
it would look like:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].Finder := []; //removing the finder for this example.
  ShowOnTarget(objs[1]);
end.
```

```{figure} ../../images/objs_nofinder.png
```
*)
function TRSObject.FindEx(me: TPoint; out cuboids: TCuboidArray; out atpa: T2DPointArray): Boolean;
begin
  cuboids := Self.GetCuboidArray(me);

  if cuboids = [] then Exit;
  atpa := Self.FindOnMainScreen(cuboids);

  Result := atpa <> [];
end;


(*
## RSObject.Find
```pascal
function TRSObject.Find(out atpa: T2DPointArray): Boolean;
```
{ref}`TRSObject` method used to find a {ref}`RSObject`.
This returns True/False if the object was found and it's `atpa` which cointains
the colors of it that were found.

For more information on this refer to {ref}`RSObject.FindEx`, it's an internal
function but is user within this one and will go into more detail.
*)
function TRSObject.Find(out atpa: T2DPointArray): Boolean;
var
  cuboids: TCuboidArray;
begin
  Result := Self.FindEx(Self.Walker^.Position(), cuboids, atpa);
end;

(*
## RSObject.FindFrom
```pascal
function TRSObject.FindFrom(position: TPoint; out atpa: T2DPointArray): Boolean;
```
This is similar to {ref}`RSObject.Find` but differs from it in that you can set
your `position`.

This is only useful when you want to predict an object position as if you were
somewhere else you are not.

What you use this for is up to you but an example use case is to pre-hover
objects before you reach a `position` you know you will be at in the future.

For example, imagine a slow agility obstacle on an agility course. Imagine you
want to click the obstacle and hover the next. You know where you will be after
you get through the current obstacle so you can use this to set your `position`
to where you will be after the current obstacle and hover the next one:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  atpa: T2DPointArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].Finder := [];

  while True do
  begin
    ShowOnTarget(atpa);
    objs[1].FindFrom([8912,36742], atpa);
  end;
end.
```

```{figure} ../../images/obj_findfrom.gif
```
As you can see on the gif above, the objects debug match the object exactly when
you are at the right coordinate.

For this I also recommend to not have a `TColorFinder` setup because it will
only match when you are at the right position.
*)
function TRSObject.FindFrom(position: TPoint; out atpa: T2DPointArray): Boolean;
var
  cuboids: TCuboidArray;
begin
  Result := Self.FindEx(position, cuboids, atpa);
end;

(*
## RSObject._UpTextCheck
```pascal
function TRSObject._UpTextCheck(out shouldExit: Boolean): Boolean;
```
Internal `TRSObject` helper method that is used by all hovering methods.

You probably don't need to use this directly.
*)
function TRSObject._UpTextCheck(out shouldExit: Boolean): Boolean;
var
  text: String;
begin
  shouldExit := True;

  if (RSClient.Mode = ERSMode.FIXED) and MSInterface.IsOpen() then
    Exit;

  if Self.UpText <> [] then
    Self.Walker^.TargetUpText := Copy(Self.UpText);

  text := MainScreen.UpText;

  if text.Contains('>') and not Self.Walker^.ActionUpText.Contains(['>']) then
  begin
    ChooseOption.Close();
    Exit;
  end;

  if (Self.UpText <> []) and text.ContainsAny(Self.UpText) then
    Exit(True);

  shouldExit := False;
end;


(*
## RSObject.PreHover
```pascal
function TRSObject.PreHover(me: TPoint; attempts: Integer = 2): Boolean;
```
To understand what this does it's recommended to read {ref}`RSObject.FindFrom`.

This method basically uses {ref}`RSObject.FindFrom` and asynchronously moves the
mouse to one of the matches.
*)
function TRSObject.PreHover(me: TPoint; attempts: Integer = 2): Boolean;
var
  attempt: Integer;
  atpa: T2DPointArray;
begin
  for attempt := 0 to attempts do
  begin
    if not Self.FindFrom(me, atpa) then Continue;
    AsyncMouse.Move(atpa.Random().Random());
    Exit(True);
  end;
end;


(*
## RSObject._ClickHelper
```pascal
function TRSObject._ClickHelper(leftClick: Boolean): Boolean;
```
Internal `TRSObject` helper method that is used by other clicking methods.
You probably don't need to use this directly.

This is what's responsible for deciding if we click a target we are hovering or
not.
*)
function TRSObject._ClickHelper(leftClick: Boolean): Boolean;
begin
  Self.Walker^.TargetUpText := [];
  Self.Walker^.ActionUpText := [];

  if Self.Walker^.RedClicked then
  begin
    Self.Walker^.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() then
  begin
    if (Self.UpText <> []) and ChooseOption.Select(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
    Exit;
  end;

  if leftClick and Biometrics.RedClick(EMouseButton.LEFT, 2) then
    Exit(True);

  Result := not leftClick and (Self.UpText <> []) and ChooseOption.Select(Self.UpText);
end;

(*
## RSObject._SelectHelper
```pascal
function TRSObject._SelectHelper(action: TStringArray): Boolean;
```
Internal TRSObject helper method that is used by other select methods.

You probably don't need to use this directly.

This is what is responsible for deciding if we just left click a target we are
hovering or right click it and choose an option.
*)
function TRSObject._SelectHelper(action: TStringArray): Boolean;
begin
  if Self.Walker^.RedClicked then
  begin
    Self.Walker^.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() and ChooseOption.Select(action) then
    Exit(True);

  if MainScreen.IsUpText(action) then
    Exit(Biometrics.RedClick(EMouseButton.LEFT, 2));

  Result := ChooseOption.Select(action);
end;


(*
## RSObject.Hover
```pascal
function TRSObject.Hover(action: TStringArray = []; attempts: Integer = 2): Boolean;
```
Method used to hover a TRSObject target if it's found on the mainscreen.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  atpa: T2DPointArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].Hover();
end.
```

```{figure} ../../images/obj_hover.gif
```
*)
function TRSObject.Hover(action: TStringArray = []; attempts: Integer = 2): Boolean;
var
  shouldExit: Boolean;
  attempt: Integer;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  if ChooseOption.IsOpen() then
  begin
    if ((Self.UpText <> []) or (action <> [])) and ChooseOption.Find(Self.UpText + action) then
      Exit(True);
    ChooseOption.Close();
  end;

  if Self.Walker = nil then
    raise GetDebugLn('TRSObject', 'Walker pointer missing.');
  if Self.Coordinates = [] then
    raise GetDebugLn('TRSObject', 'Coordinates missing.');
  if (Self.ObjectType = ERSMapObjectType.OBJ) and (Length(Self.Coordinates) <> Length(Self.Rotations)) then
    raise GetDebugLn('TRSObject', 'Coordinates and Rotations don''t match.');

  //TODO:
  //if not Self.Walker^.MakePointVisible(Self.Coordinates) then Exit;

  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0] // 0 for the closest one.
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.Random();

      Mouse.Move(tpa.RandomMean());

      if Self.UpText = [] then Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText + action) then Exit(True);

    if attempt <> (attempts - 1) then Continue;

    angle := Minimap.GetCompassAngle();
    Minimap.SetCompassAngle(angle-50, angle+50);
  end;
end;

(*
## RSObject.WalkHover
```pascal
function TRSObject.WalkHover(action: TStringArray = []; attempts: Integer = 2): Boolean;
```
Method used to walk towards and hover a `TRSObject` target if it's found on the
mainscreen.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  atpa: T2DPointArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].WalkHover();
end.
```

```{figure} ../../images/obj_walkhover.gif
```

In the gif above the function exited true before we finished walking
which is why it's not hovering the bank after we finished walking.

The way this works is that if we successfully hover the bank while walking
it returns true.
*)
function TRSObject.WalkHover(action: TStringArray = []; attempts: Integer = 2): Boolean;
var
  me, closest: TPoint;
  path, tpa: TPointArray;
  hasPath: Boolean;
  shouldExit: Boolean;
  attempt: Integer;
  atpa: T2DPointArray;
begin
  if ChooseOption.IsOpen() then
  begin
    if ((Self.UpText <> []) or (action <> [])) then
      if ChooseOption.Find(Self.UpText + action) then
        Exit(True);
    ChooseOption.Close();
  end;

  me :=  Self.Walker^.Position();
  closest := Self.Walker^.GetClosestPointEx(me, Self.Coordinates, path);

  //if the point is not reachable with the webgraph (like a banker behind a booth) then pick nearest node as target
  if path = [] then
  begin
    path := Self.Walker^.WebGraph^.FindObjectPath(me, closest);
    if path = [] then
      raise GetDebugLn('TRSObject', 'Can''t path to object.');
    hasPath := True;
  end;

  if Self.UpText <> [] then
    Self.Walker^.TargetUpText := Copy(Self.UpText);
  Self.Walker^.ActionUpText := action;

  //check if doors need to be passed to reach target
  if hasPath or Self.Walker^.WebGraph^.WalkableClusters.InSameTPA(me, closest) then
  begin
    if not Self.Walker^.MakePointVisible(closest) and not Self.Walker^.WebWalkEx(me, closest, 32, 0.33) then
      Exit;
  end
  else
  if not Self.Walker^.WebWalk(closest, 32, 0.33) then
    Exit;

  Result := Self._UpTextCheck(shouldExit) or Self.Walker^.RedClicked;
  if shouldExit then Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0]
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.Random();

      Mouse.Move(tpa.RandomMean());

      if Self.UpText = [] then
        Exit(True);
      Sleep(50); //give uptext 1~ frame time to update
    end;

    if MainScreen.IsUpText(Self.UpText + action) then
      Exit(True);

    me := Self.Walker^.Position();
    closest := Self.Walker^.GetClosestPointEx(me, Self.Coordinates, path);

    if path = [] then
    begin
      path := Self.Walker^.WebGraph^.FindObjectPath(me, closest);
      if path = [] then
        raise GetDebugLn('TRSObject', 'Can''t path to object.');
    end;

    if me.DistanceTo(closest) > 50 then
    begin
      Self.Walker^.WebWalkEx(me, closest, 30, 0.15);
      Continue;
    end;

    if attempt <> (attempts - 1) then Continue;

    if me.DistanceTo(closest) > 25 then
    begin
      Self.Walker^.WebWalkEx(me, closest, 25, 0.15);
      Continue;
    end;

    Minimap.SetCompassAngle(Minimap.GetCompassAngle(), 50);
  end;
end;


(*
## RSObject.Click
```pascal
function TRSObject.Click(leftClick: Boolean = True; attempts: Integer = 2): Boolean;
```
Method used to click a `TRSObject` target if it's found on the mainscreen.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  atpa: T2DPointArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].Click();
end.
```

```{figure} ../../images/obj_click.gif
```
*)
function TRSObject.Click(leftClick: Boolean = True; attempts: Integer = 2): Boolean;
begin
  Result := Self.Hover([], attempts) and Self._ClickHelper(leftClick);
end;

(*
## RSObject.Select
```pascal
function TRSObject.Select(action: TStringArray; attempts: Integer = 2): Boolean;
```
Method used to select an option on a `TRSObject` target if it's found on the
mainscreen.

Through `action` you can specify the interaction you are looking for.
If this interaction is the uptext when you hover the object WaspLib will simply
left click it.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  atpa: T2DPointArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].Select(['Collect']);
end.
```

```{figure} ../../images/obj_select.gif
```
*)
function TRSObject.Select(action: TStringArray; attempts: Integer = 2): Boolean;
begin
  Self.Walker^.ActionUpText := action;
  Result := Self.Hover(action, attempts) and Self._SelectHelper(action);
  Self.Walker^.TargetUpText := [];
  Self.Walker^.ActionUpText := [];
end;


(*
## RSObject.WalkClick
```pascal
function TRSObject.WalkClick(leftClick: Boolean = True; attempts: Integer = 2): Boolean;
```
Method used to walk towards and click a `TRSObject` target if it's found on the
mainscreen.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  atpa: T2DPointArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].WalkClick();
end.
```

```{figure} ../../images/obj_walkclick.gif
```
*)
function TRSObject.WalkClick(leftClick: Boolean = True; attempts: Integer = 2): Boolean;
begin
  if Self.Walker = nil then
    raise GetDebugLn('TRSObject', 'Walker pointer missing.');
  if Self.Coordinates = [] then
    raise GetDebugLn('TRSObject', 'Coordinates missing.');
  if (Self.ObjectType = ERSMapObjectType.OBJ) and (Length(Self.Coordinates) <> Length(Self.Rotations)) then
    raise GetDebugLn('TRSObject', 'Coordinates and Rotations don''t match.');

  Result := Self.WalkHover([], attempts) and Self._ClickHelper(leftClick);
  Self.Walker^.TargetUpText := [];
end;

(*
## RSObject.WalkSelect
```pascal
function TRSObject.WalkSelect(action: TStringArray; attempts: Integer = 2): Boolean;
```
Method used to walk towards and select an option on a `TRSObject` target if it's
found on the mainscreen.

Through `action` you can specify the interaction you are looking for.
If this interaction is the uptext when you hover the object WaspLib will simply
left click it.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  objs: TRSObjectArray;
  atpa: T2DPointArray;
begin
  Map.Setup([ERSChunk.VARROCK]);
  objs := TRSObjectArray.Create(ObjectsJSON.GetByAction('Bank'));
  objs[1].WalkSelect(['Collect']);
end.
```

```{figure} ../../images/obj_walkselect.gif
```
*)
function TRSObject.WalkSelect(action: TStringArray; attempts: Integer = 2): Boolean;
begin
  if Self.Walker = nil then
    raise GetDebugLn('TRSObject', 'Walker pointer missing.');
  if Self.Coordinates = [] then
    raise GetDebugLn('TRSObject', 'Coordinates missing.');
  if (Self.ObjectType = ERSMapObjectType.OBJ) and (Length(Self.Coordinates) <> Length(Self.Rotations)) then
    raise GetDebugLn('TRSObject', 'Coordinates and Rotations don''t match.');

  Result := Self.WalkHover(action, attempts);
  Result := Result and Self._SelectHelper(action);

  Self.Walker^.TargetUpText := [];
  Self.Walker^.ActionUpText := [];
end;


(*
## RSObject.DistanceTo
```pascal
function TRSObject.DistanceTo(pt: TPoint): Double;
```
Returns the distance of an object to you. Because {ref}`RSObjects` can have
multiple coordinates, only the closest one is considered for the calculation.

This is useful to for example, compared which of 2 objects are closest to you.

Example:
```pascal
me := Map.Position();

if bankBooth.DistanceTo(me) < bankChest.DistanceTo(me) then
  bankBooth.WalkClick()
else
  bankChest.WalkClick();
```
*)
function TRSObject.DistanceTo(pt: TPoint): Double;
var
  dist: Double;
  i: Integer;
begin
  Result := $FFFFFF;
  for i := 0 to High(Self.Coordinates) do
  begin
    dist := Self.Coordinates[i].DistanceTo(pt);
    if dist < Result then
      Result := dist;
  end;
end;

(*
## RSObjectArray.ClosestIndex
```pascal
function TRSObjectArray.ClosestIndex(pt: TPoint): Integer;
```
Returns the index of the `TRSObjectArray` which is closest to you.

Uses {ref}`RSObject.DistanceTo` on each of the indices of the current
`TRSObjectArray` and returns the closest index.
*)
function TRSObjectArray.ClosestIndex(pt: TPoint): Integer;
var
  closest, dist: Double;
  i, j: Integer;
begin
  closest := $FFFFFF;
  for i := 0 to High(Self) do
    for j := 0 to High(Self[i].Coordinates) do
    begin
      dist := Self[i].Coordinates[j].DistanceTo(pt);
      if dist >= closest then Continue;

      closest := dist;
      Result := i;
    end;
end;

(*
## TImage.DrawObject
```pascal
procedure TImage.DrawObject(obj: TRSObject);
```
Helper method to debug TRSObjects. Draws objects with different colors based on their type.
*)
procedure TImage.DrawObject(obj: TRSObject);
var
  atpa: T2DPointArray;
  cuboids: TCuboidArray;
  i: Integer;
  bottomColor: TColor;
begin
  if not obj.FindEx(obj.Walker^.Position(), cuboids, atpa) then Exit;

  // Different colors for different object types
  case obj.ObjectType of
    ERSMapObjectType.OBJ:  bottomColor := $00FFFF; // Yellow for objects
    ERSMapObjectType.NPC:  bottomColor := $FFFF00; // Cyan for NPCs  
    ERSMapObjectType.ITEM: bottomColor := $FF00FF; // Magenta for items
  end;

  Self.DrawColor := bottomColor;
  for i := 0 to High(cuboids) do
  begin
    Self.DrawTPA(cuboids[i].Bottom.Corners.Connect().Grow(1));
    Self.DrawTPA(cuboids[i].Top.Corners.Connect().Grow(1));
  end;

  Self.DrawColor := TColor.Random();
  Self.DrawATPA(atpa);

  Self.DrawColor := $FFFFFF;
  for i := 0 to High(cuboids) do
    Self.DrawTPA(cuboids[i].Edges());
end;

(*
## ShowOnTarget TRSObject
```pascal
procedure ShowOnTarget(obj: TRSObject); overload;
```
Shows an image of the target with the `TRSObject` drawn on it.
*)
procedure ShowOnTarget(obj: TRSObject); overload;
var
  img: TImage;
begin
  img := Target.GetImage();
  img.DrawObject(obj);
  img.Show();
end;


function ToString(constref obj: TRSObject): String; override;
begin
  Result := '[' + ToString(obj.ObjectType) + ', ' +
                  ToString(obj.UpText) + ', ' +
                  ToString(obj.Size) + ', ' +
                  ToString(obj.Coordinates) + ', ' +
                  ToString(obj.Rotations) + ', ' +
                  ToString(obj.Filter) + ', ' +
                  ToString(obj.Finder) + ', ' +
                  ToString(obj.UseDot) + ', ' +
                  ToString(obj.Track) + ']';
end;
