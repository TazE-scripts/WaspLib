(*
# Map
This file is responsible for the TRSMap positioning system.
It was made from scratch by Torwent but heavily inspired in the original
TRSWalker by [slacky](https://slacky.one/) and it's future iterations made by
Olly.
Without them, this wouldn't be possible.

For a online interactive map you can visit
[WaspScripts map](https://map.waspscripts.com/)

For something simpler and much closer to the original
[slacky](https://slacky.one/) walker check out {ref}`Image Map`.
*)

{$DEFINE WL_MAP_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

const
  MAP_CACHE_TOLERANCE = 50;

type
(*
## TRSPosition
Record holding a player's full position:
- X, Y coordinate
- Z which is the player height on the current heightmap
- Plane which is the player's current plane if several planes are being used.
*)
  TRSPosition = record
    X, Y, Plane: Integer;
    Z: Single;
  end;

function TRSPosition.ToPoint(): TPoint;
begin
  Result := [Self.X, Self.Y];
end;

type
(*
## TRSMap
Record responsible for positioning.
*)
  TRSMap = record
    RegionIndex: Integer;
    Region: TRSMapRegion;

    Walker: TRSWalker;

    Similarity: Single;
    Cache: record
      LocalPosition: TPoint;
      Position: TPoint;
      FullPosition: TRSPosition;
      MatchTemplate: TMatchTemplateCache;
      
      CurrentChunk: TPoint;      
      CacheValid: Boolean;      
    end;
    Loader: TRSMapLoader;

    Sample: TRSMapSample;

    Filters: TBoxFilterArray;

    IsSetup, DisableHeightmap: Boolean;
  end;

  PRSMap = ^TRSMap;

function TRSMap.Position(): TPoint; forward;

function TRSMap.Height(pt: TPoint = [0,0]; global: Boolean = True): Single; forward;


(*
## Map.InternalSetup
```pascal
procedure TRSMap.InternalSetup();
```
Internal TRSMap setup method.
This is caleld automatically for you and you shouldn't need to call it.
*)
procedure TRSMap.InternalSetup();
var
  img, sample: TImage;
  i: Integer;
  b: TBox;
begin
  if Self.Sample.Amount = 0 then Self.Sample.Amount := 4;
  if Self.Sample.Radius = 0 then Self.Sample.Radius := 65;

  img := Minimap.GetCleanImage();
  sample := Minimap.ScaleMinimap(img, Self.Loader.Downscale, Self.Sample.Radius);

  Self.Cache.MatchTemplate := TMatchTemplateCache.Create(Self.Loader.DownscaledMap, sample, ETMFormula.TM_CCOEFF_NORMED);
  Self.Cache.MatchTemplate.FreeOnTerminate := True;

  Self.Filters := [];
  for i := 0 to High(Self.Loader.Regions) do
  begin
    b := Self.Loader.Regions[i].Region.Expand(-(Self.Loader.Padding));
    Self.Filters += [b, True];
  end;

  if not Self.IsSetup then
  begin
    Self.Walker.Setup(
      @Self.Position, @Self.Height, @Self.Loader.GetLocal,
      @Self.Loader.Graph, Self.Loader.Map
    );
    Self.Walker.Name := 'Map.Walker';
    Self.IsSetup := True;
  end;
  
  Self.Cache.CacheValid := False;
end;


(*
## Map.Setup
```pascal
procedure TRSMap.SetupEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
procedure TRSMap.Setup(chunks: TRSMapChunkArray; downscale: UInt32 = 8);
procedure TRSMap.Setup(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
```
Sets up a {ref}`TRSMap`.
*)
procedure TRSMap.SetupEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
var
  i: Int32;
  chunk: TRSMapChunk;
  chunks: array of TRSMapChunk;
begin
  chunk.Planes := planes;

  for i := 0 to High(boxes) do
  begin
    chunk.Chunk := boxes[i];
    chunks += chunk;
  end;

  Self.Loader.Load(chunks, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.Setup(chunks: TRSMapChunkArray; downscale: UInt32 = 8);
begin
  Self.Loader.Load(chunks, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.Setup(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
var
  chunks: array of TRSMapChunk;
  echunk: ERSChunk;
begin
  for echunk in echunks do
    chunks += echunk.Get();
  Self.Setup(chunks, downscale);
end;

(*
## Map.Add
```pascal
procedure TRSMap.AddEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
procedure TRSMap.Add(chunks: TRSMapChunkArray; downscale: UInt32 = 8);
procedure TRSMap.Add(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
```
TRSMap to add maps to an already setup TRSMap.
*)
procedure TRSMap.AddEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
var
  i: Int32;
  chunk: TRSMapChunk;
  chunks: array of TRSMapChunk;
begin
  chunk.Planes := planes;

  for i := 0 to High(boxes) do
  begin
    chunk.Chunk := boxes[i];
    chunks += chunk;
  end;

  Self.Loader.Add(chunks, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.Add(chunks: TRSMapChunkArray; downscale: UInt32 = 8);
var
  chunk: TRSMapChunk;
begin
  for chunk in chunks do
    Self.AddEx([chunk.Chunk], chunk.Planes, downscale);
end;

procedure TRSMap.Add(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
var
  chunks: array of TRSMapChunk;
  echunk: ERSChunk;
begin
  for echunk in echunks do
    chunks += echunk.Get();
  Self.Add(chunks, downscale);
end;


(*
## Map.ScaledSearch
```pascal
function TRSMap.ScaledSearch(img: TImage): TPointArray;
```
Internal TRSMap method used to get an initial TPointArray of possible positions.
This is performed in a downscaled map with a downscaled minimap.
This is very innacurate by itself but by ruling down most of the map
in a downscaled search before doing a full sized search speed has a dramatic boost.
You probably won't ever need to call this directly.
*)
function TRSMap.ScaledSearch(img: TImage): TPointArray;
var
  sample: TImage;
  matrix: TSingleMatrix;
  w, h, i, loops: Integer;
  pt, loaderOffset: TPoint;
  width, height: Integer;
begin
  sample := Minimap.ScaleMinimap(img, Self.Loader.Downscale, Self.Sample.Radius);
  matrix := MatchTemplateMask(Self.Cache.MatchTemplate, sample.ToMatrix(), ETMFormula.TM_CCOEFF_NORMED);
  w := sample.Width div 2;
  h := sample.Height div 2;

  loaderOffset := [Self.Loader.Downscale div 2, Self.Loader.Downscale div 2];
  matrix.GetSize(width, height);
  width -= 1;
  height -= 1;

  while Length(Result) < Self.Sample.Amount do
  begin
    with matrix.ArgMax() do
    begin
      pt := Offset(w, h);
      pt := pt * Self.Loader.Downscale;

      for i := 0 to High(Self.Filters) do
      begin
        if Self.Filters[i].Valid(pt) then
        begin
          Result += pt + loaderOffset;
          matrix.Fill([Max(0, X-5), Max(0, Y-5), Min(width, X+5), Min(height, Y+5)], 0);
          Continue(2);
        end;
      end;

      matrix.Fill([Max(0, X-5), Max(0, Y-5), Min(width, X+5), Min(height, Y+5)], 0);
    end;

    if Inc(loops) > 70 then Break;
  end;
end;


(*
## Map.Position
```pascal
function TRSMap.Position(): TPoint;
property TRSMap.FullPosition(): TRSPosition;
```
Returns the players current position on the loaded map.
`TRSMap.FullPosition()` also returns the current Z level.

Example:
```pascal
WriteLn(Map.Position());
WriteLn(Map.Similarity); // Check to see the match percentage if needed
```
*)
function TRSMap.Position(): TPoint;
var
  clean: TImage;
  tpa: TPointArray;
  i: Integer;
  hit: TPoint;
  match: Single;
  nearbyPositions: TPointArray;
begin
  clean := Minimap.GetCleanImage();
  
    // Try cached position first
  if Self.Cache.CacheValid and (Self.Cache.LocalPosition <> [0,0]) then
  begin
    hit := TRSImageMap.FullSearch(clean, Self.Loader.Map, Self.Cache.LocalPosition, match);
    
    if match > 0.6 then
    begin
      Self.Similarity := match;
      Self.Cache.LocalPosition := hit;
      
      Self.RegionIndex := Self.Loader.LocalIndex(hit);
      if Self.RegionIndex >= 0 then
      begin
        Self.Region := Self.Loader.Regions[Self.RegionIndex];
        Result := RSTranslator.Normalize(Self.Loader.GetGlobal(Self.RegionIndex, hit));
        Self.Cache.Position := Result;
        Self.Cache.CurrentChunk := RSTranslator.Global2Chunk(Result);
        Exit(Result);
      end;
    end else
    begin
            // Try nearby positions around cached location
      nearbyPositions := [
        Self.Cache.LocalPosition.Offset([-MAP_CACHE_TOLERANCE, 0]),
        Self.Cache.LocalPosition.Offset([MAP_CACHE_TOLERANCE, 0]),
        Self.Cache.LocalPosition.Offset([0, -MAP_CACHE_TOLERANCE]),
        Self.Cache.LocalPosition.Offset([0, MAP_CACHE_TOLERANCE])
      ];
      
      for i := 0 to High(nearbyPositions) do
      begin
        hit := TRSImageMap.FullSearch(clean, Self.Loader.Map, nearbyPositions[i], match);
        if match > 0.6 then
        begin
          Self.Similarity := match;
          Self.Cache.LocalPosition := hit;
          
          Self.RegionIndex := Self.Loader.LocalIndex(hit);
          if Self.RegionIndex >= 0 then
          begin
            Self.Region := Self.Loader.Regions[Self.RegionIndex];
            Result := RSTranslator.Normalize(Self.Loader.GetGlobal(Self.RegionIndex, hit));
            Self.Cache.Position := Result;
            Self.Cache.CurrentChunk := RSTranslator.Global2Chunk(Result);
            Exit(Result);
          end;
        end;
      end;
    end;
  end;
  
  // Cache miss - do full search
  Self.RegionIndex := -1;
  Self.Region := [];
  Self.Similarity := 0;

  tpa := Self.ScaledSearch(clean);

  for i := 0 to High(tpa) do
  begin
    hit := TRSImageMap.FullSearch(clean, Self.Loader.Map, tpa[i], match);

    if match > Self.Similarity then
    begin
      Self.Similarity := match;
      Result := hit;
    end;
  end;

  Self.Cache.LocalPosition := Result;

  Self.RegionIndex := Self.Loader.LocalIndex(Result);
  if Self.RegionIndex < 0 then
    Exit([0,0]);

  Self.Region := Self.Loader.Regions[Self.RegionIndex];
  Result := RSTranslator.Normalize(Self.Loader.GetGlobal(Self.RegionIndex, Result));
  Self.Cache.Position := Result;
  
  // Update cache
  Self.Cache.CurrentChunk := RSTranslator.Global2Chunk(Result);
  Self.Cache.CacheValid := True;
end;

property TRSMap.FullPosition: TRSPosition;
begin
  with Self.Position() do
  begin
    Result.X := X;
    Result.Y := Y;
    Result.Plane := Self.Region.Plane;
    Result.Z := Self.Height([X,Y]);
  end;

  Self.Cache.FullPosition := Result;
end;

function TRSMap.GetRegionIndex(): Int32;
begin
  Self.Position();
  Result := Self.RegionIndex;
end;


(*
## Map.Height
```pascal
function TRSMap.Height(pt: TPoint; global: Boolean = True): Single;
```
Returns the height of the player at the specified coordinate if there's a heightmap loaded.
If `pt` is `[0,0]`, which is the default then we will use our current position.
`global` decides wether the coordinate is converted to {ref}`global points` or if it's meant to be used
as internal {ref}`local points`.

Example:
```pascal
WriteLn Map.Height();
```
*)
function TRSMap.Height(pt: TPoint = [0,0]; global: Boolean = True): Single;
begin
  if Self.DisableHeightmap or not Assigned(Self.Loader.Heightmap) then
    Exit(0.0);

  if pt = [0,0] then
  begin
    global := False;
    Self.Position();
    pt := Self.Cache.LocalPosition;
  end;

  if global then
    pt := Self.Loader.GetLocal(Self.RegionIndex, pt);

  Result := RSTranslator.Color2Height(Self.Loader.Heightmap.Pixel[pt.X,pt.Y]) +
            RSTranslator.Color2Height(Self.Loader.Heightmap.Pixel[pt.X,pt.Y + 1]) +
            RSTranslator.Color2Height(Self.Loader.Heightmap.Pixel[pt.X + 1,pt.Y]) +
            RSTranslator.Color2Height(Self.Loader.Heightmap.Pixel[pt.X + 1,pt.Y + 1]);
  Result := Result/4;
end;


(*
## Map.DebugPosition
```pascal
function TRSMap.DebugPosition(): TPoint;
```
Debugs the player position in the currently loaded map.

Example:
```pascal
Map.Setup(...);
while True do
  Map.DebugPosition();
```
*)
function TRSMap.DebugPosition(print: Boolean = True): TPoint;
  function _BoxStr(b: TBox): String;
  begin
    Result := Format('[%d, %d, %d, %d]', [b.X1, b.Y1, b.X2, b.Y2]);
  end;
var
  x1, y1, x2, y2, x, y, i: Int32;
  p, local: TPoint;
  img, map, cleanMinimap: TImage;
  time: Double;
  lines: TStringArray;
begin
  Target.FreezeImage();

  time   := PerformanceTime();
  Result := Self.Position();

  time   := PerformanceTime() - time;

  case Self.RegionIndex of
    -1:  local := Result;
    else
    begin
      local := Self.Loader.GetLocal(Self.RegionIndex, Result);
      x := Self.Region.Region.X1;
      y := Self.Region.Region.Y1;
    end;
  end;

  x1 := Max(0, local.X - 200);
  y1 := Max(0, local.Y - 200);
  x2 := Min(x1 + 400, Self.Loader.Map.Width  - 1);
  y2 := Min(y1 + 400, Self.Loader.Map.Height - 1);

  x := local.X - x1;
  y := local.Y - y1;

  lines := [
    'Position:',
    ' - Local : '  + Format('[%d, %d]', [local.X, local.Y]),
    ' - Global: ' + Format('[%d, %d]', [Result.X, Result.Y]),
    '',
    'Region:',
    ' - Index   : ' + ToStr(Self.RegionIndex),
    ' - Name    : ' + ToStr(Self.Region.Name),
    ' - Plane   : ' + ToStr(Self.Region.Plane),
    ' - Local   : ' + _BoxStr(Self.Region.Region),
    ' - Original: ' + _BoxStr(Self.Region.Original),
    ' - Compass: '  + ToStr(Minimap.GetCompassAngle()),
    '',
    'Certainty: '    + ToStr(Round(Self.Similarity, 3)),
    'Time: '         + ToStr(Round(time)) + ' ms'
  ];

  map := Self.Loader.Map.Copy([x1, y1, x2, y2]);
  map.DrawColor := $00FF00;
  map.DrawLine(Point(0, y), Point(x2 - x1, y));
  map.DrawLine(Point(x, 0), Point(x, y2 - y1));
  map.DrawColor := $FFFFFF;
  map.DrawBox([x - 2, y - 2, x + 2, y + 2]);

  cleanMinimap := Minimap.ScaleMinimap(Minimap.GetCleanImage(), 1);
  img := new TImage(700 + cleanMinimap.Width, 440);
  img.DrawImage(map, [10, 20]);
  with cleanMinimap.Center do
    if RSClient.Mode = ERSMode.FIXED then
      p := Point(X, Y).Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), [X,Y]);

  cleanMinimap.DrawColor := $FFFFFF;
  cleanMinimap.DrawBoxFilled([p.X - 1, p.Y - 1, p.X + 1, p.Y + 1]);

  {$IFDEF WINDOWS}
  img.FontName := 'Consolas';
  {$ENDIF}
  img.FontSize := 18;
  img.FontAntialiasing := True;

  img.DrawColor := $FFFFFF;
  for i := 0 to High(lines) do
  begin
    if print then WriteLn(lines[i]);
    img.DrawText(lines[i], [430, cleanMinimap.Height + 20 + 20 * i]);
  end;

  img.DrawImage(cleanMinimap, [520, 10]);
  img.Show();

  Target.UnFreezeImage();
end;

(*
## Map.DebugHeight
```pascal
procedure TRSMap.DebugHeight();
```
Debugs the heightmap with {ref}`MM2MS`.

Example:
```pascal
{$I WaspLib/osrs.simba}
begin
  Map.Setup([ERSChunk.VARROCK]);
  while True do
  begin
    Options.GetZoomLevel(False);
    Map.DebugHeight();
  end;
end.
```

```{figure} ../../images/mm2ms_height.gif
```
*)
procedure TRSMap.DebugHeight();
var
  quad: TQuad;
  arr, tpa: TPointArray;
  pt, loc, currLoc: TPoint;
  x,y: Integer;
  vector: TVector3;
  corners: TVector3Array;
  angle, h: Single;
  img: TImage;
begin
  angle := Minimap.GetCompassAngle(False);

  img := Target.GetImage();
  img.DrawColor := $00FF00;
  img.DrawAlpha := $77;

  Self.Position();
  loc := Self.Cache.LocalPosition;
  h := Self.Height(loc - [1,3], False) + Self.Height(loc + [3,-3], False) +
       Self.Height(loc + [3,1], False) + Self.Height(loc - [1,1], False);
  h := h/4;

  for x := Minimap.Center.X - 100 to Minimap.Center.X + 100 with 4 do
    for y := Minimap.Center.Y - 100 to Minimap.Center.Y + 100 with 4 do
    begin
      vector := Point(x,y).ToVec3().Rotate(angle, Minimap.Center);
      pt := vector.ToPoint();

      if not Minimap.PointOnZoomQuad(pt) then Continue;

      with Minimap.NormalizeEx([vector.X, vector.Y], angle) do
      begin
        vector.X := X;
        vector.Y := Y;
      end;

      currLoc := loc + Point(x,y) - Minimap.Center;

      corners := [
        [vector.X-2, vector.Y-2, Self.Height(currLoc - [1,3],  False) - h],
        [vector.X+2, vector.Y-2, Self.Height(currLoc + [3,-3], False) - h],
        [vector.X+2, vector.Y+2, Self.Height(currLoc + [3,1],  False) - h],
        [vector.X-2, vector.Y+2, Self.Height(currLoc - [1,1],  False) - h]
      ];

      arr := MM2MS.Run(corners, angle);
      quad := [arr[0], arr[1], arr[2], arr[3]];
      tpa := quad.Corners.Connect().ExtractBox(MainScreen.Bounds);
      img.DrawTPA(tpa);
    end;

  img.Show();
end;

function TRSMap.GetQuad(me, pt: TPoint; angle: Single = $FFFF): TQuad;
var
  vector: TVector2;
  corners: TVector3Array;
  h: Single;
  currLoc: TPoint;
  arr: TPointArray;
begin
  if angle = $FFFF then angle := Minimap.GetCompassAngle(False);
  vector := Self.Walker.Point2MMVec(me, pt, angle);
  pt := vector.ToPoint();

  if not Minimap.PointOnZoomQuad(pt) then Exit;

  vector := Minimap.NormalizeEx(vector, angle);
  me := Self.Loader.GetLocal(me);

  h := Self.Height(me - [1,3], False) + Self.Height(me + [3,-3], False) +
       Self.Height(me + [3,1], False) + Self.Height(me - [1,1], False);
  h := h/4;

  currLoc := me + vector.ToPoint() - Minimap.Center;

  corners := [
    [vector.X-2, vector.Y-2, Self.Height(currLoc - [1,3],  False) - h],
    [vector.X+2, vector.Y-2, Self.Height(currLoc + [3,-3], False) - h],
    [vector.X+2, vector.Y+2, Self.Height(currLoc + [3,1],  False) - h],
    [vector.X-2, vector.Y+2, Self.Height(currLoc - [1,1],  False) - h]
  ];

  arr := MM2MS.Run(corners, angle);
  Result := [arr[0], arr[1], arr[2], arr[3]];
end;

var
(*
## Map variable
Global {ref}`TRSMap` variable.
*)
  Map: TRSMap;
