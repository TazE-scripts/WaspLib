(*
# Logger
File-based logging with timestamps, log levels, and optional console/file control.
*)

{$DEFINE WL_LOGGER_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils/envpaths.simba}
{$INCLUDE_ONCE WaspLib/utils/time.simba}

(*
## ELogLevel
```pascal
ELogLevel = enum(INFO, SUCCESS, WARN, ERROR);
```
Log levels with color coding for console output.
*)
type
  ELogLevel = enum(INFO, SUCCESS, WARN, ERROR);

(*
## TLogger
```pascal
TLogger = record
  Name: String;
  Path: String;
  TimeRunning: TStopwatch;
  IsSetup: Boolean;
  EnableConsole: Boolean;
  EnableFile: Boolean;
end;
```
Logger record for managing log files, timing, and output control.
*)
  TLogger = record
    Name: String;
    Path: String;
    TimeRunning: TStopwatch;
    IsSetup: Boolean;
    EnableConsole: Boolean;
    EnableFile: Boolean;
  end;

(*
## Global Logger Instance
```pascal
var Logger: TLogger;
```
Global logger instance.
*)
var
  Logger: TLogger;

(*
## TLogger._Setup
```pascal
procedure TLogger._Setup();
```
Internal setup method that creates the default log file and manages log rotation.
*)
procedure TLogger._Setup();
var
  files: TStringArray;
  i: Integer;
  date, oldest: TDateTime;
  filename: String;
begin
  Self.Path := WLEnv.LogsDir;

  files := DirList(Self.Path);
  if Length(files) > 100 then
  begin
    oldest := TDateTime.CreateFromSystem();
    for i := 0 to High(files) do
    begin
      date := FileCreationTime(files[i]);
      if date < oldest then
      begin
        oldest := date;
        filename := files[i];
      end;
    end;

    if not FileDelete(filename) then
      raise GetTimeStamp() + ' Logger: Failed to delete old log: ' + PathExtractName(filename);
  end;

  if not DirCreate(Self.Path) then
    raise GetTimeStamp() + ' Logger: Failed to create logs directory.';

  Self.Path += TDateTime.CreateFromSystem().ToString(FILE_TIME_FORMAT) + '.log';
  if not FileCreate(Self.Path) then
    raise GetTimeStamp() + ' Logger: Failed to create log file: ' + PathExtractName(Self.Path);

  Self.TimeRunning.Start();
end;

(*
## TLogger.Setup
```pascal
procedure TLogger.Setup(name: String = ''; enableConsole: Boolean = True; enableFile: Boolean = True);
```
Sets up the logger with optional console and file output control.
*)
procedure TLogger.Setup(name: String = ''; enableConsole: Boolean = True; enableFile: Boolean = True);
var
  old: String;
begin
  Self.Name := name;
  Self.IsSetup := name <> '';
  Self.EnableConsole := enableConsole;
  Self.EnableFile := enableFile;
  old := Self.Path;
  Self.Path := WLEnv.LogsDir;

  if Self.EnableFile then
  begin
    if not DirCreate(Self.Path) then
      raise GetTimeStamp() + ' Logger: Failed to create log path: ' + Self.Path;

    Self.Path += TDateTime.CreateFromSystem().ToString(FILE_TIME_FORMAT) + '.log';

    if Self.IsSetup and (old <> Self.Path) then
    begin
      if FileExists(old) then
      begin
        if not FileRename(old, Self.Path) then
          raise GetTimeStamp() + ' Logger: Failed to rename log file: ' + PathExtractName(old) + ' > ' + PathExtractName(Self.Path);
      end;
      if not FileCreate(Self.Path) then
        raise GetTimeStamp() + ' Logger: Failed to create log file: ' + PathExtractName(Self.Path);
    end;
  end;

  Self.TimeRunning.Start();
end;

(*
## TLogger.AddLine
```pascal
procedure TLogger.AddLine(line: String);
```
Adds a line to the log file if file logging is enabled.
*)
procedure TLogger.AddLine(line: String);
begin
  if Self.EnableFile then
    FileAppend(Self.Path, line + LINE_SEP);
end;

(*
## TLogger.FormatLevel
```pascal
function TLogger.FormatLevel(level: ELogLevel): String;
```
Formats log level with fixed width for column alignment.
*)
function TLogger.FormatLevel(level: ELogLevel): String;
begin
  case level of
    ELogLevel.INFO:    Result := 'INFO ';
    ELogLevel.SUCCESS: Result := 'SUCCS';
    ELogLevel.WARN:    Result := 'WARN ';
    ELogLevel.ERROR:   Result := 'ERROR';
  end;
end;

(*
## GetDebugLn
```pascal
function GetDebugLn(text: String; log: Boolean = True): String;
function GetDebugLn(name, text: String; log: Boolean = True): String;
function GetDebugLn(text: String; level: ELogLevel; log: Boolean = True): String;
function GetDebugLn(name, text: String; level: ELogLevel; log: Boolean = True): String;
```
Creates debug log lines with timestamps and optional color coding.
*)
function GetDebugLn(text: String; log: Boolean = True): String;
begin
  Result := 'INFO  ' + GetTimeStamp() + ' [Logger]: ' + text;
  if log then Logger.AddLine(Result);
end;

function GetDebugLn(name, text: String; log: Boolean = True): String; overload;
begin
  Result := 'INFO  ' + GetTimeStamp() + ' [' + name + ']: ' + text;
  if log then Logger.AddLine(Result);
end;

function GetDebugLn(text: String; level: ELogLevel; log: Boolean = True): String; overload;
var
  levelStr: String;
begin
  levelStr := Logger.FormatLevel(level);
  Result := levelStr + ' ' + GetTimeStamp() + ' [Logger]: ' + text;
  if log then Logger.AddLine(Result);

  case level of
    ELogLevel.SUCCESS: Result := #0#0'000008' + Result;
    ELogLevel.WARN:    Result := #0#0'000002' + Result;
    ELogLevel.ERROR:   Result := #0#0'000004' + Result;
  end;
end;

function GetDebugLn(name, text: String; level: ELogLevel; log: Boolean = True): String; overload;
var
  levelStr: String;
begin
  levelStr := Logger.FormatLevel(level);
  Result := levelStr + ' ' + GetTimeStamp() + ' [' + name + ']: ' + text;
  if log then Logger.AddLine(Result);

  case level of
    ELogLevel.SUCCESS: Result := #0#0'000008' + Result;
    ELogLevel.WARN:    Result := #0#0'000002' + Result;
    ELogLevel.ERROR:   Result := #0#0'000004' + Result;
  end;
end;

(*
## TLogger.Info
```pascal
procedure TLogger.Info(text: String; vars: array of Variant = []);
```
Logs an info message with optional formatting variables.
*)
procedure TLogger.Info(text: String; vars: array of Variant = []);
var
  formatted, logLine: String;
begin
  formatted := Format(text, vars);
  logLine := 'INFO  ' + GetTimeStamp() + ' [' + Self.Name + ']: ' + formatted;

  Self.AddLine(logLine);
  if Self.EnableConsole then
    WriteLn(logLine);
end;

(*
## TLogger.Success
```pascal
procedure TLogger.Success(text: String; vars: array of Variant = []);
```
Logs a success message with optional formatting variables.
*)
procedure TLogger.Success(text: String; vars: array of Variant = []);
var
  formatted, logLine: String;
begin
  formatted := Format(text, vars);
  logLine := 'SUCCS ' + GetTimeStamp() + ' [' + Self.Name + ']: ' + formatted;

  Self.AddLine(logLine);
  if Self.EnableConsole then
    WriteLn(#0#0'000008' + logLine);
end;

(*
## TLogger.Warn
```pascal
procedure TLogger.Warn(text: String; vars: array of Variant = []);
```
Logs a warning message with optional formatting variables.
*)
procedure TLogger.Warn(text: String; vars: array of Variant = []);
var
  formatted, logLine: String;
begin
  formatted := Format(text, vars);
  logLine := 'WARN  ' + GetTimeStamp() + ' [' + Self.Name + ']: ' + formatted;

  Self.AddLine(logLine);
  if Self.EnableConsole then
    WriteLn(#0#0'000002' + logLine);
end;

(*
## TLogger.Error
```pascal
procedure TLogger.Error(text: String; vars: array of Variant = []);
```
Logs an error message with optional formatting variables.
*)
procedure TLogger.Error(text: String; vars: array of Variant = []);
var
  formatted, logLine: String;
begin
  formatted := Format(text, vars);
  logLine := 'ERROR ' + GetTimeStamp() + ' [' + Self.Name + ']: ' + formatted;

  Self.AddLine(logLine);
  if Self.EnableConsole then
    WriteLn(#0#0'000004' + logLine);
end;

(*
## TLogger.Exception
```pascal
procedure TLogger.Exception(text: String; vars: array of Variant = []);
```
Logs an error message and raises an exception.
*)
procedure TLogger.Exception(text: String; vars: array of Variant = []);
var
  formatted, logLine: String;
begin
  formatted := Format(text, vars);
  logLine := 'ERROR ' + GetTimeStamp() + ' [' + Self.Name + ']: ' + formatted;

  Self.AddLine(logLine);
  raise #0#0'000004' + logLine;
end;
