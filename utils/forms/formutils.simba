(*
# Form Utilities
Forms and components extensions.

The following contains custom components and methods to be used in a `TLazForm`.
*)
{$DEFINE WL_FORMUTILS_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

procedure TLazForm.ScaleToDPI();
begin
  Self.ScaleBy(Self.PixelsPerInch, 96);
end;

(*
## TLazControl.SetFontColor
```pascal
procedure TLazControl.SetChildsFontColor(value: Integer);
```
Recursevely sets all childrens fonts colors to `value`.
*)
procedure TLazControl.SetChildsFontColor(value: TColor);
var
  i: Integer;
begin
  for i := 0 to Self.ComponentCount - 1 do
    TLazControl(Self.GetComponent(i)).SetChildsFontColor(value);
  Self.Font.Color := value;
end;


function TLazComponent.NameMatch(name: String): Boolean;
begin
  Result := (Self <> nil) and (Self.Name = name);
end;

(*
## TLazComponent.GetChild
```pascal
function TLazComponent.GetChild(name: String): TLazComponent;
```
Recursively search for a children with the specified name.
*)
function TLazComponent.GetChild(name: String): TLazComponent;
var
  i: Integer;
begin
  if Self = nil then Exit;

  if Self.Name = name then Exit(Self);

  for i := 0 to Self.ComponentCount - 1 do
  begin
    Result := Self.GetComponent(i).GetChild(name);
    if Result <> nil then
      Break;
  end;
end;

(*
## TLazComponent.RemoveChildren
```pascal
procedure TLazComponent.RemoveChildren(release: Boolean = False);
```
Recursively remove children from a parent.

To also free the parent set **release** to true.

All children are freed when using this.
*)
procedure TLazComponent.RemoveChildren(release: Boolean = False);
var
  child: TLazComponent;
begin
  if Self.ComponentCount = 0 then
  begin
    if release then Self.Free();
    Exit;
  end;

  child := Self.GetComponent(0);
  Self.RemoveComponent(child);
  child.RemoveChildren(True);
  Self.RemoveChildren(release);
end;


(*
## TLazComponent.NumberField
```pascal
procedure TLazComponent.NumberField(sender: TLazObject; var key: Char);
```
Callback method to limit user input to numbers only and backspace.
This numbers can be `Integers` only.
For `Doubles` check {ref}`TLazComponent.FloatField`
*)
procedure TLazComponent.NumberField({$H-}sender: TLazObject;{$H+} var key: Char);
begin
  case key of
    '0'..'9', #8: ;
    else key := #0;
  end;
end;

(*
## TLazComponent.FloatField
```pascal
procedure TLazComponent.FloatField(sender: TLazObject; var key: Char);
```
Callback method to limit user input to numbers only and backspace.
This numbers can be `Integers` or `Doubles` only.
For `Integers` only check {ref}`TLazComponent.FloatField`
*)
procedure TLazComponent.FloatField(sender: TLazObject; var key: Char);
begin
  case key of
    '0'..'9', #8: ;
    '.': if TLazCustomEdit(sender).Text.Contains('.') then key := #0;
    else key := #0;
  end;
end;

(*
## TLazComponent.MailField
```pascal
procedure TLazComponent.MailField({$H-}sender: TLazObject;{$H+} var key: Char);
```
Callback method to limit user input to characters used in email addresses.
*)
procedure TLazComponent.MailField({$H-}sender: TLazObject;{$H+} var key: Char);
begin
  if key = ' ' then key := #0;
end;

(*
## Component.TimeField
```pascal
procedure TLazComponent.TimeField(sender: TLazObject; var key: Char);
```
Callback method to limit user input to numbers only, backspace and a few
characters used in time like ":", "-", "_", ",", etc.
*)
procedure TLazComponent.TimeField({$H-}sender: TLazObject;{$H+} var key: Char);
begin
  case key of
    '0'..'9', #8, '.', ':', '-', '_', ',', ' ': ;
    else key := #0;
  end;
end;

(*
## Component.NumberArrayField
```pascal
procedure TLazComponent.NumberArrayField(sender: TLazObject; var key: Char);
```
Callback method to limit user input to a TIntegerArray. Brackets not included.
*)
procedure TLazComponent.NumberArrayField({$H-}sender: TLazObject;{$H+} var key: Char);
begin
  case key of
    '0'..'9', ',', ' ' , #8: ;
    else key := #0;
  end;
end;

(*
## Control.OpenURL
```pascal
procedure TLazControl.OpenURL(sender: TLazObject);
```
Opens the URL in the control caption if there's any.
*)
procedure TLazControl.OpenURL(sender: TLazObject);
var
  url: String;
begin
  url := Trim(TLazControl(sender).Caption);
  if url.IsURL() then URLOpenInBrowser(url);
end;

procedure TLazControl.OnMouseEnterURL(sender: TLazObject);
begin
  TLazControl(sender).Font.Color := $FF0000;
end;

procedure TLazControl.OnMouseLeaveURL(sender: TLazObject);
begin
  TLazControl(sender).Font.Color := $20000000;
end;

procedure TLazLabel.SetURL();
begin
  Self.OnMouseEnter := @Self.OnMouseEnterURL;
  Self.OnMouseLeave := @Self.OnMouseLeaveURL;
  Self.OnClick := @Self.OpenURL;
  Self.Cursor := ELazCursor.HandPoint;
end;


(*
## CustomEdit.IsEmpty
```pascal
function TCustomEdit.IsEmpty(): Boolean;
```
Returns true or false if the `TCustomEdit` are empty.
This includes:
- `TCustomEdit`
- `TLazEdit`
- `TLazMemo`
*)
function TLazCustomEdit.IsEmpty(): Boolean;
var
  txt: String;
  i: Integer;
begin
  txt := Self.Text;
  for i := 1 to Length(txt) do
    if txt[i] <> ' ' then Exit(False);
  Result := True;
end;

(*
## CustomEdit.GetIntegerArray
```pascal
function TCustomEdit.GetIntegerArray(): TIntegerArray;
```
Returns the TIntegerArray in the TCustomEdit (TLazEdit and TLazMemo).
It's probably a good idea to limit the TCustomEdit input with **TLazComponent.IntArrayField()**.
*)
function TLazCustomEdit.GetIntegerArray(min, max: Integer = 0): TIntegerArray;
var
  str, s: String;
  int: Integer;
begin
  str := Self.Text;

  for s in str.Split(',') do
  begin
    int := s.Trim().ExtractInteger();
    if (min = max) or InRange(int, min, max) then
      Result += int;
  end;
end;


procedure TLazControl.AnchorVertically(lbl: Pointer; spacing: Integer = 0);
begin
  Self.AnchorSideLeft.Control := TLazControl(lbl);
  Self.AnchorSideLeft.Side := ELazAnchorSideReference.asrTop;
  Self.AnchorSideTop.Control := TLazControl(lbl);
  Self.AnchorSideTop.Side := ELazAnchorSideReference.asrBottom;
  if spacing > 0 then
    Self.BorderSpacing.Top := spacing;
end;

procedure TLazControl.AnchorHorizontally(lbl: Pointer; spacing: Integer = 0);
begin
  Self.AnchorSideTop.Control := TLazControl(lbl);
  Self.AnchorSideTop.Side := ELazAnchorSideReference.asrTop;
  Self.AnchorSideLeft.Control := TLazControl(lbl);
  Self.AnchorSideLeft.Side := ELazAnchorSideReference.asrBottom;
  if spacing > 0 then
    Self.BorderSpacing.Left := 10;
end;


(*
## TLazControl.CreateEx
```pascal
function TLazPanel.CreateEx(owner: Pointer): TLazPanel; static;
function TLazPanel.CreateEx(owner: Pointer; width, height: Integer): TLazPanel; static; overload;
function TLazLabel.CreateEx(owner: Pointer): TLazLabel; static;
function TLazLabel.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazLabel; static; overload;
function TLazEdit.CreateEx(owner: Pointer): TLazEdit; static;
function TLazEdit.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazEdit; static; overload;
function TLazMemo.CreateEx(owner: Pointer): TLazMemo; static;
function TLazMemo.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazMemo; static; overload;
function TLazButton.CreateEx(owner: Pointer): TLazButton; static;
function TLazButton.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazButton; static; overload;
function TLazCheckBox.CreateEx(owner: Pointer): TLazCheckBox; static;
function TLazCheckBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazCheckBox; static; overload;
function TLazRadioButton.CreateEx(owner: Pointer): TLazRadioButton; static;
function TLazRadioButton.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazRadioButton; static; overload;
function TLazComboBox.CreateEx(owner: Pointer): TLazComboBox; static;
function TLazComboBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazComboBox; static; overload;
function TLazListBox.CreateEx(owner: Pointer): TLazListBox; static;
function TLazListBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazListBox; static; overload;
function TLazTrackBar.CreateEx(owner: Pointer): TLazTrackBar; static;
function TLazTrackBar.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazTrackBar; static; overload;
function TImageBox.CreateEx(owner: Pointer): TImageBox; static;
function TImageBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TImageBox; static; overload;
```
Constructor functions for most `TLazControls`.
*)
function TLazPanel.CreateEx(owner: Pointer): TLazPanel; static;
begin
  Result := TLazPanel.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazPanel.CreateEx(owner: Pointer; width, height: Integer): TLazPanel; static; overload;
begin
  Result := TLazPanel.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;
end;


function TLazLabel.CreateEx(owner: Pointer): TLazLabel; static;
begin
  Result := TLazLabel.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazLabel.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazLabel; static; overload;
begin
  Result := TLazLabel.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazEdit.CreateEx(owner: Pointer): TLazEdit; static;
begin
  Result := TLazEdit.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazEdit.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazEdit; static; overload;
begin
  Result := TLazEdit.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazMemo.CreateEx(owner: Pointer): TLazMemo; static;
begin
  Result := TLazMemo.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazMemo.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazMemo; static; overload;
begin
  Result := TLazMemo.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazButton.CreateEx(owner: Pointer): TLazButton; static;
begin
  Result := TLazButton.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazButton.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazButton; static; overload;
begin
  Result := TLazButton.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazCheckBox.CreateEx(owner: Pointer): TLazCheckBox; static;
begin
  Result := TLazCheckBox.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazCheckBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazCheckBox; static; overload;
begin
  Result := TLazCheckBox.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazRadioButton.CreateEx(owner: Pointer): TLazRadioButton; static;
begin
  Result := TLazRadioButton.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazRadioButton.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazRadioButton; static; overload;
begin
  Result := TLazRadioButton.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazComboBox.CreateEx(owner: Pointer): TLazComboBox; static;
begin
  Result := TLazComboBox.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
  Result.Style := ELazComboBoxStyle.csDropDownList;
end;

function TLazComboBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazComboBox; static; overload;
begin
  Result := TLazComboBox.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazListBox.CreateEx(owner: Pointer): TLazListBox; static;
begin
  Result := TLazListBox.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazListBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazListBox; static; overload;
begin
  Result := TLazListBox.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TLazTrackBar.CreateEx(owner: Pointer): TLazTrackBar; static;
begin
  Result := TLazTrackBar.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TLazTrackBar.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TLazTrackBar; static; overload;
begin
  Result := TLazTrackBar.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


function TImageBox.CreateEx(owner: Pointer): TImageBox; static;
begin
  Result := TImageBox.Create(TLazControl(owner));
  Result.Parent := TLazWinControl(owner);
end;

function TImageBox.CreateEx(owner: Pointer; caption: String; hint: String = ''; width, height: Integer = 0): TImageBox; static; overload;
begin
  Result := TImageBox.CreateEx(owner);

  if width > 0 then Result.Width := width;
  if height > 0 then Result.Height := height;

  Result.Caption := caption;
  if hint <> '' then
  begin
    Result.Hint := hint;
    Result.ShowHint := True;
  end;
end;


(*
## TLazControl.LoadImage
```pascal
procedure TLazControl.LoadImage(path: String);
procedure TLazControl.LoadImage(img: TImage); overload;
```
Load a image file and set it as the background for a TLazControl.
This can be used to set images for TLazPanels, TLazPageControls, TLazTabSheet, TLazButtons, etc.
*)
procedure TLazControl.LoadImage(path: String);
var
  img: TLazImage;
begin
  img := TLazImage.Create(Self);
  img.Parent := Self;
  img.Picture.LoadFromFile(path);
  img.SetBounds(0, 0, Self.Width, Self.Height);
  img.Stretch := True;
  img.Proportional := True;
  img.Align := ELazAlign.Client;
end;

procedure TLazControl.LoadImage(img: TImage); overload;
var
  limg: TLazImage;
begin
  limg := TLazImage.Create(Self);
  limg.Parent := Self;
  limg.Picture.Bitmap := img.ToLazBitmap();
  limg.SetBounds(0, 0, Self.Width, Self.Height);
  limg.Stretch := True;
  limg.Proportional := True;
  limg.Align := ELazAlign.Client;
end;


(*
## CheckBox.SetChecked
```pascal
procedure TLazCheckBox.SetChecked(value: Boolean);
```
Sets the checkbox checked or unchecked with a boolean.
*)
procedure TLazCheckBox.SetChecked(value: Boolean);
begin
  if value then
    Self.State := ELazCheckBoxState.cbChecked
  else
    Self.State := ELazCheckBoxState.cbUnchecked;
end;

(*
## CheckBox.IsChecked
```pascal
function TLazCheckBox.IsChecked(): Boolean;
```
Gets the checkbox state, checked or unchecked with a boolean.
*)
function TLazCheckBox.IsChecked(): Boolean;
begin
  Result := Self.State = ELazCheckBoxState.cbChecked;
end;

(*
## CheckBox.Toggle
```pascal
procedure TLazCheckBox.Toggle();
```
Inverts the checkbox.
*)
procedure TLazCheckBox.Toggle();
begin
  case Self.State of
    ELazCheckBoxState.cbChecked: Self.State := ELazCheckBoxState.cbUnchecked;
    ELazCheckBoxState.cbUnchecked: Self.State := ELazCheckBoxState.cbChecked;
  end;
end;


function TLazStrings.Search(value: String; lo: Integer = 0): Integer;
begin
  value := value.ToLower();
  for Result := lo to Self.Count - 1 do
    if value in Self.Strings[Result].ToLower() then
      Exit;
  Result := -1;
end;

function TLazListBox.Search(value: String): Integer;
var
  lo: Integer;
begin
  if Length(value) > 1 then
    lo := Self.ItemIndex
  else
    lo := 0;

  Result := Self.Items.Search(value, lo);
  if Result > -1 then
    Self.ItemIndex := Result;
end;

function TLazComboBox.Search(value: String): Integer;
var
  lo: Integer;
begin
  if Length(value) > 1 then
    lo := Self.ItemIndex
  else
    lo := 0;

  Result := Self.Items.Search(value, lo);
  if Result > -1 then
    Self.ItemIndex := Result;
end;
