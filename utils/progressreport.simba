(*
# Reporter
Formatted progress reports with bordered table.
*)
{$DEFINE WL_PROGRESS_REPORT_INCLUDED}
{$INCLUDE_ONCE Wasplib/utils/logger.simba}
{$INCLUDE_ONCE WaspLib/utils/time.simba}

(*
## TReport
```pascal
TReport = record
  TimeRunning: TStopwatch;
  IsSetup: Boolean;
  ReportNames: TStringArray;
  ValuesGetter: function: TStringArray of Object;
end;
```
Report record for managing progress reports with timing and formatted output.
*)
type
  TReport = record
    TimeRunning: TStopwatch;
    IsSetup: Boolean;
    ReportNames: TStringArray;
    ValuesGetter: function: TStringArray of Object;
    Title: String;
  end;

(*
## TReport.Setup
```pascal
procedure TReport.Setup(reportNames: TStringArray = []);
```
Sets up the reporter with column names for the progress report.
*)
procedure TReport.Setup(reportNames: TStringArray = []; title: String = '');
var
  i, len: Integer;
  str: String;
begin
  Self.IsSetup := True;
  Self.TimeRunning.Start();
  Self.ReportNames := [];
  Self.Title := title;

  for i := 0 to High(reportNames) do
  begin
    if len < Length(reportNames[i]) then
      len := Length(reportNames[i]);
  end;

  len += 2;

  for i := 0 to High(reportNames) do
  begin
    str := reportNames[i] + ': ';
    Self.ReportNames += str.PadRight(len - Length(str), ' ');
  end;
end;

(*
## TReport.GetTimeRunning
```pascal
function TReport.GetTimeRunning(): String;
```
Returns the formatted elapsed time since the reporter was started.
*)
function TReport.GetTimeRunning(): String;
begin
  Result := Self.TimeRunning.ElapsedFmt();
end;

(*
## TReport.GetReport
```pascal
function TReport.GetReport(values: TStringArray): String;
```
Generates a formatted report with the provided values in a bordered table format.
*)
function TReport.GetReport(values: TStringArray): String;
var
  i, totalWidth: Integer;
  half: Single;
  str, lines, btm, header: String;
  nameLen, valueLen: Integer;
begin
  if Length(Self.ReportNames) <> Length(values) then
    raise GetTimeStamp() + ':[Reporter]: `TReport.ReportNames` and `values` need to be the same length!';

  totalWidth := 15 + 15 + 5; // name column + value column + separators

  for i := 0 to High(Self.ReportNames) do
  begin
    str := '| ' + Self.ReportNames[i].PadRight(15) + ' ' + values[i].PadRight(15) + ' |';
    lines += str + LINE_SEP;
  end;

  btm := '+' + '-' * (totalWidth-2) + '+';

  str := Self.Title;
  if str = '' then str := 'Report';
  half := (totalWidth + 1 - Length(str)-3)/2;

  header := '+' + '-' * Floor(half) +  str + '-' * Ceil(half) + '+';

  Result := header + LINE_SEP + lines + btm;
end;

(*
## TReport.Report
```pascal
procedure TReport.Report();
```
Displays the current report using the ValuesGetter function to retrieve current values.
*)
procedure TReport.Report();
begin
  WriteLn Self.GetReport(Self.ValuesGetter());
end;
